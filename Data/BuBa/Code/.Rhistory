#--- Extract locations
X$Loc = paste(X$Ortsteil, X$Strasse, X$Hausnr, X$Stadtteil, X$Kiez, X$Postbezirk, X$Lage, sep="=")
X$Loc = gsub("NA", "", X$Loc)
Y$Loc = paste(Y$Ortsteil, Y$Strasse, Y$Hausnr, Y$Stadtteil, Y$Kiez, Y$Postbezirk, Y$Lage, sep="=")
#-------------------------------------------------------------------------------
#--- Merge housing data with geographical coordinates of announced dwellings
Z = merge(Y, X, by.x="Loc", by.y="Loc", all=T)
Z$Loc = NULL
svDrop = c("Ortsteil", "Stadtteil", "Kiez", "Postbezirk", "Lage", "Strasse", "Hausnr")
svDrop = paste(svDrop, "y", sep=".")
Z = Z[, setdiff(names(Z), svDrop)]
svRename = gsub("y", "x", svDrop)
names(Z)[match(svRename, names(Z))] = gsub("\\.x", "", names(Z)[match(svRename, names(Z))])
#-------------------------------------------------------------------------------
#--- Save data with attached coordinates
write.csv(Z, paste(sFolder, sOutFile2, sep=""), na="", row.names=F)
#-------------------------------------------------------------------------------
proc.time() - Begin
#-------------------------------------------------------------------------------
# This code is designed to join the coordinates of houses captured from
# Straube's map of Berlin of 1910.
# Written by K.A.Kholodilin
# DIW Berlin
# kkholodilin (at) diw . de
# First created --- March 3, 2015
# Last modified --- March 4, 2015
#-------------------------------------------------------------------------------
rm(list = ls())
Begin=proc.time()
library(fields)
library(R.oo)
library(XLConnect) # Needed to read Excel files
library(maptools) # Needed to work with spatial polygons
Sys.setlocale(, "German")
#-------------------------------------------------------------------------------
#--- Initial settings
sFolder = "h:/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "d:/users/kkholodilin/MyCodes/Immo_Hist/Data/"
sFolder_SHP = "h:/Kkholodilin/Karty/SHP/"
#sFolder_SHP = sFolder
sInFile_SHP = "Berlin_Ortsteile_WGS84/ortsteile.shp"
sInFile1 = "Immobilien_Anzeigen_190901-191712_all_addresses.xlsx"
sInFile2 = "Immobilien_Anzeigen_190901-191712_Ortsteile.csv"
sOutFile1 = "Map_Berlin_Ads_Dwelling_coordinates.pdf"
sOutFile2 = "Immobilien_Anzeigen_190901-191712_Coordinates.csv"
#-------------------------------------------------------------------------------
#--- Load coordinates of apartments
X = readWorksheetFromFile(paste(sFolder, sInFile1, sep=""), sheet = 1,
startCol=1, endCol=13, startRow=1, endRow=6807)
vSel_NA = which(is.na(X$Soldner_1))
X = X[-vSel_NA,]
vDup = which(duplicated(paste(X$Soldner_1, X$Soldner_2)))
X = X[-vDup, ]
#-------------------------------------------------------------------------------
#--- Convert Soldner to Lon-Lat coordinates
library(sp)
library(rgdal)
Coords = cbind(X$Soldner_1, X$Soldner_2)
Attributes = as.data.frame(X$Strasse)
SP = SpatialPointsDataFrame(Coords, Attributes)
proj4string(SP) <- CRS("+proj=cass +lat_0=52.41864827777778 +lon_0=13.62720366666667 +x_0=40000 +y_0=10000 +ellps=bessel +datum=potsdam +units=m +no_defs")
SP <- spTransform(SP, CRS("+proj=longlat +datum=WGS84"))
X$Lon = SP@coords[,1]
X$Lat = SP@coords[,2]
#-------------------------------------------------------------------------------
#--- Load the map
Map = readShapePoly(paste(sFolder_SHP, sInFile_SHP, sep=""))
#--- Setting projection
proj4string(Map) <- CRS("+proj=longlat +datum=WGS84")
#-------------------------------------------------------------------------------
#--- Plot dwellings
#pdf(paste(sFolder, sOutFile1, sep=""))
par(cex.axis=0.7, mar=c(1,1,1,1), mfrow=c(1,1))
plot(Map, col="white", border="gray85")
points(X$Lon, X$Lat, pch=19, cex=0.2)
#dev.off()
#-------------------------------------------------------------------------------
#--- Check for erroneous coordinates
X[which.min(X$Lon),]
X[which.min(X$Lat),]
#-------------------------------------------------------------------------------
#--- Load housing ads
Y = read.csv(paste(sFolder, sInFile2, sep=""))
#-------------------------------------------------------------------------------
#--- Extract locations
X$Loc = paste(X$Stadtteil,X$Strasse, X$Hausnr, X$Kiez, X$Postbezirk, X$Lage, sep="=") # X$Ortsteil,
X$Loc = gsub("NA", "", X$Loc)
Y$Loc = paste(Y$Stadtteil, Y$Strasse, Y$Hausnr, Y$Kiez, Y$Postbezirk, Y$Lage, sep="=") # Y$Ortsteil,
#-------------------------------------------------------------------------------
#--- Merge housing data with geographical coordinates of announced dwellings
Z = merge(Y, X, by.x="Loc", by.y="Loc", all=T)
Z$Loc = NULL
svDrop = c("Ortsteil", "Stadtteil", "Kiez", "Postbezirk", "Lage", "Strasse", "Hausnr")
svDrop = paste(svDrop, "y", sep=".")
Z = Z[, setdiff(names(Z), svDrop)]
svRename = gsub("y", "x", svDrop)
names(Z)[match(svRename, names(Z))] = gsub("\\.x", "", names(Z)[match(svRename, names(Z))])
#-------------------------------------------------------------------------------
#--- Save data with attached coordinates
write.csv(Z, paste(sFolder, sOutFile2, sep=""), na="", row.names=F)
#-------------------------------------------------------------------------------
proc.time() - Begin
#-------------------------------------------------------------------------------
# This code is designed to assign housing ads to Berlin's districts.
# Written by K.A.Kholodilin
# DIW Berlin
# kkholodilin (at) diw . de
# First created --- March 5, 2015
# Last modified --- March 6, 2015
#-------------------------------------------------------------------------------
library(maptools)
library(rgdal)
library(sp)
library(fields)
library(XLConnect)
rm(list = ls())
Begin = proc.time()
#-------------------------------------------------------------------------------
#--- Initial settings and paths
sFolder = "h:/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "d:/users/kkholodilin/MyCodes/Immo_Hist/Data/"
sFolder_SHP = "h:/Kkholodilin/Karty/SHP/"
#sFolder_SHP = sFolder
sInFile_SHP = "Berlin_Ortsteile_WGS84/ortsteile.shp"
sInFile1 = "Immobilien_Anzeigen_190901-191712_Coordinates.csv"
sInFile2 = "Berlin_districts_subdistricts_1920.xlsx"
sOutFile = "Immobilien_Anzeigen_190901-191712_Districts.csv"
#-------------------------------------------------------------------------------
#--- Load the housing ads data
X = read.csv(paste(sFolder, sInFile1, sep=""))
#-------------------------------------------------------------------------------
#--- Load the map of Berlin's subdistricts
Map = readShapePoly(paste(sFolder_SHP, sInFile_SHP, sep=""))
#--- Setting projection
proj4string(Map) <- CRS("+proj=longlat +datum=WGS84")
#-------------------------------------------------------------------------------
#--- Assign ads to subdistricts
N = length(Map$NAME)
X$Subdistrict = ""
for(i in 1:N){
ppp = slot(Map, "polygons")
ccc = ppp[[i]]@Polygons
NC = length(ccc)
ddd = c()
for(j in 1:NC)
{
ddd=rbind(ddd, ccc[[j]]@coords)
}
a = ddd[,1]
b = ddd[,2]
ccc = point.in.polygon(X$Lon, X$Lat, a, b)
vSel_c = which(ccc>0)
NSel_c = length(vSel_c)
if(NSel_c>0)
{
X$Subdistrict[vSel_c] = as.character(Map$NAME[i])
}    # end of statement if    c==1
print(as.character(Map$NAME[i]));
} # end of loop i
vSel_NA = which(is.na(X$Jahr)==T)
if(length(vSel_NA)>0) {X = X[-vSel_NA,]}
#-------------------------------------------------------------------------------
#--- Load correspondence between districts and subdistricts
Y = readWorksheetFromFile(paste(sFolder, sInFile2, sep=""), sheet = 1)
#-------------------------------------------------------------------------------
#--- Assign districts to subdistricts
Z = merge(X, Y, by.x="Subdistrict", by.y="Subdistrict", all=T, sort=F)
vSel_NA = which(is.na(Z$Jahr)==T)
if(length(vSel_NA)>0) {Z = Z[-vSel_NA,]}
#-------------------------------------------------------------------------------
#--- Save ads with attached districts
write.csv(Z, paste(sFolder, sOutFile, sep=""), row.names=F, na="")
#summary(X)
sort(table(Z$Subdistrict))
sort(table(Z$District))
#-------------------------------------------------------------------------------
proc.time() - Begin
summary(Z)
Z[grep("Baerwalderstraße; 38", Z$Anschrift),]
Z[grep("Baerwaldstraße; 38", Z$Anschrift),]
Z[grep("Bodestraße", Z$Anschrift),]
#-------------------------------------------------------------------------------
# This code is designed to estimate hedonic regression of apartment rents in
# Berlin in 1914-1915.
# Written by K.A.Kholodilin
# DIW Berlin
# kkholodilin (at) diw . de
# First created --- July 24, 2014
# Last modified --- January 29, 2015
#-------------------------------------------------------------------------------
rm(list = ls())
Begin=proc.time()
#memory.limit(size=4000)
library(R.oo)
#-------------------------------------------------------------------------------
#--- Initial settings
sFolder = "h:/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "d:/users/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "g:/Immo_Hist/Data/"
#-------------------------------------------------------------------------------
#--- Loading the annual data
sFolder_in = paste(sFolder, "CSV/", sep="")
svFile = list.files(sFolder_in)
svFile = svFile[-grep(1908, svFile)]
svFile = svFile[-grep(1918, svFile)]
X = c()
for(i in svFile)
{
X_i = read.csv(paste(sFolder_in, i, sep=""))
#print(table(is.na(X_i$Jahr)));
#print(unique(X_i$Jahr));
#print(unique(X_i$Monat));
#print(i);
#print(unique(paste(X_i$Jahr, X_i$Monat)));
#print(names(X_i));
#print("----------------------------------------------------");
print(i)
X = rbind(X, X_i);
} # end of loop i
#------ Drop ads without date
vSel = which(is.na(X$Jahr)!=T)
X = X[vSel,]
#-------------------------------------------------------------------------------
#--- Saving joined data
Date = 100*X$Jahr + X$Monat
BegDate = min(Date)
EndDate = max(Date)
sOutFile = paste("Immobilien_Anzeigen_", BegDate, "-", EndDate, ".csv", sep="")
write.csv(X, paste(sFolder, sOutFile, sep=""), na="", row.names=F)
print(sOutFile)
#-------------------------------------------------------------------------------
proc.time() - Begin
#-------------------------------------------------------------------------------
# This code is designed to assign the real-estate announcements to Berlin's
# districts using the known addresses and the complete list of streets
# derived from the Adressbuch Berlin 1922.
# Written by K.A.Kholodilin
# DIW Berlin
# kkholodilin (at) diw . de
# First created --- July 22, 2014
# Last modified --- March 5, 2015
#-------------------------------------------------------------------------------
rm(list = ls())
Begin=proc.time()
library(R.oo)
Sys.setlocale(, "German")
source("h:/kkholodilin/MyCodes/Immo_Hist/Code/f_Simplify_Latin.r")
#-------------------------------------------------------------------------------
#--- Initial settings
sFolder = "h:/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "d:/users/kkholodilin/MyCodes/Immo_Hist/Data/"
sCore = "Immobilien_Anzeigen_190901-191712"
sInFile1 = paste(sCore, ".csv", sep="")
sInFile2 = "Berlin_Street_District_1922.csv"
sOutFile = paste(sCore, "_Ortsteile.csv", sep="")
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
fMatch_Street = function(sAddress, Street_List, Tab_ST)
{
Sel = which(Street_List$Street==sAddress)
Ortsteil = Street_List$District[Sel]
vIndex_ST = match(Ortsteil, names(Tab_ST))
NIndex_ST = length(vIndex_ST)
if(NIndex_ST==0) {Ortsteil = ""}
if(NIndex_ST>1) {Ortsteil = names(which.max(Tab_ST[vIndex_ST]))}
#Strasse_neu = Street_List$Name_heute[Sel]
Out = data.frame(Ortsteil) #, Strasse_neu)
#print(paste(Ortsteil, sAddress, sep=": ", NIndex_ST))
#print(Out)
#print("----------------------------")
return(Out)
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#--- Load the announcements and list of streets
X = read.csv(paste(sFolder, sInFile1, sep=""))
Y = read.csv(paste(sFolder, sInFile2, sep=""))
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#--- Make street names comparable
X$Strasse = unlist(lapply(strsplit(as.character(X$Anschrift), ";"), function(x) x[1]))
X$Strasse = f_Simplify_Latin(X$Strasse)
X$Strasse = gsub("joachimstaler", "joachimsthaler", X$Strasse)
X$Strasse = gsub("baireuth", "bayreuth", X$Strasse)
X$Strasse = gsub("koelnisch", "koellnisch", X$Strasse)
#X$Strasse = gsub("spandauerbruecke", "anderspandauerbruecke", X$Strasse)
#X$Strasse = gsub("anderander", "ander", X$Strasse)
X$Strasse = gsub("luckanerstrasse", "luckauerstrasse", X$Strasse)
X$Strasse = gsub("margarethenstrasse", "margaretenstrasse", X$Strasse)
X$Strasse = gsub("\\(priv\\)strasse", "privatstrasse", X$Strasse)
X$Strasse[which(X$Strasse=="spandauerbruecke")] = "anderspandauerbruecke"
X$Strasse[which(X$Strasse=="frankfurteralle")] = "frankfurterallee"
X$Strasse[which(X$Strasse=="repkowplatz")] = "eykevonrepkowplatz"
X$Strasse[which(X$Strasse=="schwarnweberstrasse")] = "scharnweberstrasse"
X$Strasse[which(X$Strasse=="culmstrasse")] = "kulmerstrasse"
X$Strasse[which(X$Strasse=="sigmaringerstrasse")] = "sigmaringenerstrasse"
X$Strasse[which(X$Strasse=="stallschreibergasse")] = "stallschreiberstrasse"
X$Strasse[which(X$Strasse=="victoriastrasse")] = "viktoriastrasse"
X$Strasse[which(X$Strasse=="westphaelischestrasse")] = "westfaelischestrasse"
X$Strasse[which(X$Strasse=="zossenstrasse")] = "zossenerstrasse"
X$Stadtteil = gsub("Neuköln", "Neukölln", X$Stadtteil)
Y$Street = f_Simplify_Latin(Y$Street)
Y$Ort_Str = paste(Y$District, Y$Street)
vSel_dup = which(duplicated(Y$Ort_Str))
Y = Y[-vSel_dup,]
#-------------------------------------------------------------------------------
#--- Computing frequencies of districts in advertisements
Tab_ST = table(X$Stadtteil)
Tab_ST = Tab_ST[-which(names(Tab_ST)=="")]
#-------------------------------------------------------------------------------
#--- Assign districts
Aux = lapply(X$Strasse, fMatch_Street, Y, Tab_ST)  #[1:20]
Z <- do.call(rbind, lapply(Aux, data.frame))
X = cbind(X, Z)
#--- Correct erroneous assignment
vSel = which(X$Stadtteil!="")
X[vSel, c("Stadtteil", "Ortsteil")]
X$Ortsteil = as.character(X$Ortsteil)
X$Stadtteil = as.character(X$Stadtteil)
X$Ortsteil[vSel] = X$Stadtteil[vSel]
#-------------------------------------------------------------------------------
#--- Unify Stadtteil names
X$Stadtteil = trim(X$Stadtteil)
X$Stadtteil = gsub("-Ost", "", X$Stadtteil)
X$Stadtteil = gsub("-West", "", X$Stadtteil)
X$Stadtteil = gsub("-Friedenau", "", X$Stadtteil)
X$Stadtteil = gsub("-Steglitz", "", X$Stadtteil)
X$Stadtteil = gsub("Charlottenurg", "Charlottenburg", X$Stadtteil)
#-------------------------------------------------------------------------------
#--- Extract house numbers
X$Hausnr = unlist(lapply(strsplit(as.character(X$Anschrift), ";"), function(x) x[2]))
X$Hausnr = gsub("-", "--", X$Hausnr)
X$Hausnr = gsub("/", "--", X$Hausnr)
X$Hausnr = gsub(" ", "", X$Hausnr)
X$Hausnr = gsub("\\*", "", X$Hausnr)
X$Hausnr = trim(X$Hausnr)
#-------------------------------------------------------------------------------
#--- Save the data with districts
write.csv(X, paste(sFolder, sOutFile, sep=""), row.names=F, na="")
#-------------------------------------------------------------------------------
#--- Check the streets with missing district assignment
sort(unique(X$Ortsteil))
X$Ortsteil = factor(X$Ortsteil)
sort(table(X$Ortsteil))
vSel_na = which(X$Ortsteil=="")
vSel_na = setdiff(vSel_na, which(is.na(X$Strasse==T)))
X_ud = X[vSel_na, c("Strasse", "Jahr", "Monat")]
X_ud[order(X_ud$Strasse),]
length(vSel_na)
#-------------------------------------------------------------------------------
proc.time() - Begin
#-------------------------------------------------------------------------------
# This code is designed to join the coordinates of houses captured from
# Straube's map of Berlin of 1910.
# Written by K.A.Kholodilin
# DIW Berlin
# kkholodilin (at) diw . de
# First created --- March 3, 2015
# Last modified --- March 4, 2015
#-------------------------------------------------------------------------------
rm(list = ls())
Begin=proc.time()
library(fields)
library(R.oo)
library(XLConnect) # Needed to read Excel files
library(maptools) # Needed to work with spatial polygons
Sys.setlocale(, "German")
#-------------------------------------------------------------------------------
#--- Initial settings
sFolder = "h:/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "d:/users/kkholodilin/MyCodes/Immo_Hist/Data/"
sFolder_SHP = "h:/Kkholodilin/Karty/SHP/"
#sFolder_SHP = sFolder
sInFile_SHP = "Berlin_Ortsteile_WGS84/ortsteile.shp"
sInFile1 = "Immobilien_Anzeigen_190901-191712_all_addresses.xlsx"
sInFile2 = "Immobilien_Anzeigen_190901-191712_Ortsteile.csv"
sOutFile1 = "Map_Berlin_Ads_Dwelling_coordinates.pdf"
sOutFile2 = "Immobilien_Anzeigen_190901-191712_Coordinates.csv"
#-------------------------------------------------------------------------------
#--- Load coordinates of apartments
X = readWorksheetFromFile(paste(sFolder, sInFile1, sep=""), sheet = 1,
startCol=1, endCol=13, startRow=1, endRow=6807)
vSel_NA = which(is.na(X$Soldner_1))
X = X[-vSel_NA,]
vDup = which(duplicated(paste(X$Soldner_1, X$Soldner_2)))
X = X[-vDup, ]
#-------------------------------------------------------------------------------
#--- Convert Soldner to Lon-Lat coordinates
library(sp)
library(rgdal)
Coords = cbind(X$Soldner_1, X$Soldner_2)
Attributes = as.data.frame(X$Strasse)
SP = SpatialPointsDataFrame(Coords, Attributes)
proj4string(SP) <- CRS("+proj=cass +lat_0=52.41864827777778 +lon_0=13.62720366666667 +x_0=40000 +y_0=10000 +ellps=bessel +datum=potsdam +units=m +no_defs")
SP <- spTransform(SP, CRS("+proj=longlat +datum=WGS84"))
X$Lon = SP@coords[,1]
X$Lat = SP@coords[,2]
#-------------------------------------------------------------------------------
#--- Load the map
Map = readShapePoly(paste(sFolder_SHP, sInFile_SHP, sep=""))
#--- Setting projection
proj4string(Map) <- CRS("+proj=longlat +datum=WGS84")
#-------------------------------------------------------------------------------
#--- Plot dwellings
#pdf(paste(sFolder, sOutFile1, sep=""))
par(cex.axis=0.7, mar=c(1,1,1,1), mfrow=c(1,1))
plot(Map, col="white", border="gray85")
points(X$Lon, X$Lat, pch=19, cex=0.2)
#dev.off()
#-------------------------------------------------------------------------------
#--- Check for erroneous coordinates
X[which.min(X$Lon),]
X[which.min(X$Lat),]
#-------------------------------------------------------------------------------
#--- Load housing ads
Y = read.csv(paste(sFolder, sInFile2, sep=""))
#-------------------------------------------------------------------------------
#--- Extract locations
X$Loc = paste(X$Stadtteil,X$Strasse, X$Hausnr, X$Kiez, X$Postbezirk, X$Lage, sep="=") # X$Ortsteil,
X$Loc = gsub("NA", "", X$Loc)
Y$Loc = paste(Y$Stadtteil, Y$Strasse, Y$Hausnr, Y$Kiez, Y$Postbezirk, Y$Lage, sep="=") # Y$Ortsteil,
#-------------------------------------------------------------------------------
#--- Merge housing data with geographical coordinates of announced dwellings
Z = merge(Y, X, by.x="Loc", by.y="Loc", all=T)
Z$Loc = NULL
svDrop = c("Ortsteil", "Stadtteil", "Kiez", "Postbezirk", "Lage", "Strasse", "Hausnr")
svDrop = paste(svDrop, "y", sep=".")
Z = Z[, setdiff(names(Z), svDrop)]
svRename = gsub("y", "x", svDrop)
names(Z)[match(svRename, names(Z))] = gsub("\\.x", "", names(Z)[match(svRename, names(Z))])
#-------------------------------------------------------------------------------
#--- Save data with attached coordinates
write.csv(Z, paste(sFolder, sOutFile2, sep=""), na="", row.names=F)
#-------------------------------------------------------------------------------
proc.time() - Begin
#-------------------------------------------------------------------------------
# This code is designed to assign housing ads to Berlin's districts.
# Written by K.A.Kholodilin
# DIW Berlin
# kkholodilin (at) diw . de
# First created --- March 5, 2015
# Last modified --- March 6, 2015
#-------------------------------------------------------------------------------
library(maptools)
library(rgdal)
library(sp)
library(fields)
library(XLConnect)
rm(list = ls())
Begin = proc.time()
#-------------------------------------------------------------------------------
#--- Initial settings and paths
sFolder = "h:/kkholodilin/MyCodes/Immo_Hist/Data/"
#sFolder = "d:/users/kkholodilin/MyCodes/Immo_Hist/Data/"
sFolder_SHP = "h:/Kkholodilin/Karty/SHP/"
#sFolder_SHP = sFolder
sInFile_SHP = "Berlin_Ortsteile_WGS84/ortsteile.shp"
sInFile1 = "Immobilien_Anzeigen_190901-191712_Coordinates.csv"
sInFile2 = "Berlin_districts_subdistricts_1920.xlsx"
sOutFile = "Immobilien_Anzeigen_190901-191712_Districts.csv"
#-------------------------------------------------------------------------------
#--- Load the housing ads data
X = read.csv(paste(sFolder, sInFile1, sep=""))
#-------------------------------------------------------------------------------
#--- Load the map of Berlin's subdistricts
Map = readShapePoly(paste(sFolder_SHP, sInFile_SHP, sep=""))
#--- Setting projection
proj4string(Map) <- CRS("+proj=longlat +datum=WGS84")
#-------------------------------------------------------------------------------
#--- Assign ads to subdistricts
N = length(Map$NAME)
X$Subdistrict = ""
for(i in 1:N){
ppp = slot(Map, "polygons")
ccc = ppp[[i]]@Polygons
NC = length(ccc)
ddd = c()
for(j in 1:NC)
{
ddd=rbind(ddd, ccc[[j]]@coords)
}
a = ddd[,1]
b = ddd[,2]
ccc = point.in.polygon(X$Lon, X$Lat, a, b)
vSel_c = which(ccc>0)
NSel_c = length(vSel_c)
if(NSel_c>0)
{
X$Subdistrict[vSel_c] = as.character(Map$NAME[i])
}    # end of statement if    c==1
print(as.character(Map$NAME[i]));
} # end of loop i
vSel_NA = which(is.na(X$Jahr)==T)
if(length(vSel_NA)>0) {X = X[-vSel_NA,]}
#-------------------------------------------------------------------------------
#--- Load correspondence between districts and subdistricts
Y = readWorksheetFromFile(paste(sFolder, sInFile2, sep=""), sheet = 1)
#-------------------------------------------------------------------------------
#--- Assign districts to subdistricts
Z = merge(X, Y, by.x="Subdistrict", by.y="Subdistrict", all=T, sort=F)
vSel_NA = which(is.na(Z$Jahr)==T)
if(length(vSel_NA)>0) {Z = Z[-vSel_NA,]}
#-------------------------------------------------------------------------------
#--- Save ads with attached districts
write.csv(Z, paste(sFolder, sOutFile, sep=""), row.names=F, na="")
#summary(X)
sort(table(Z$Subdistrict))
sort(table(Z$District))
#-------------------------------------------------------------------------------
proc.time() - Begin
table(is.na(Z$Subdistrict))
table((Z$Subdistrict==""))

# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
target.df=data[data$eval,c(target,'set-target')]
# loading results
# res.file=paste('H:/git/zeit-2/Results/IP_h',h,'_maxobs_',60+h,'.RData',sep='')
if (rec==1){
res.file=paste(DirCode,'/Results/rec_',target,'_h',h,'.RData',sep='')
}else{
res.file=paste(DirCode,'/Results/',target,'_h',h,'.RData',sep='')
}
load(res.file)
fc=sapply(forecast.all,function(x) as.numeric(x$fc))
modn=row.names(forecast.all[[1]])
# dropping vintages that can not be used
fc=fc[,1:nrow(target.df)]
row.names(fc)=modn
#         fc=fc[-grep('zeit|rword',row.names(fc)),]
# dimensions OK? dim(fc)
targetm=t(matrix(rep(target.df[,target],nrow(fc)),ncol=nrow(fc)))
fe=fc-targetm
if (rec==1){
ela=read.csv(paste(DirCode,'/results/rec_elanet_ranking',target,'_h',h,'.csv',sep=''),row.names=1)
}else{
ela=read.csv(paste(DirCode,'/results/elanet_ranking',target,'_h',h,'.csv',sep=''),row.names=1)
}
source('~/.active-rstudio-document', echo=TRUE)
View(CS)
View(best)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(CS)
source('~/.active-rstudio-document', echo=TRUE)
View(CS)
View(best)
View(result.mt)
rank.mt=sapply(mt,function(x) x$rank.theilsu)
View(rank.mt)
View(result.r)
t=fce[grep('MT.',row.names(fce)),]
t=fe[grep('MT.',row.names(fe)),]
View(t)
write.csv(t,paste(DirCode,'test.csv',sep=''))
getwd
getwd()
write.csv(t,'t.csv')
target.d
View(target.df)
plot(target.df[,2])
plot(target.df[,1])
lines(fc['MT.de.climate'])
plot(fc['MT.de.climate'])
(fc['MT.de.climate'])
plot(fc['MT.de.climate',])
plot(target.df[,1])
plot(fc['MT.de.climate',])
plot(target.df[,1])
lines(target.df[,1],col='red')
plot(target.df[,1])
lines(fc['MT.de.climate',],col='red')
plot(fe['MT.de.climate',],col='red')
rankcs=sapply(cs,function(x) x$rank.theilsu)
View(rankcs)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
row.names(cra)=row.names(result)
cra.mt=cra[grep('MT.',row.names(cra)),]
grep('MT.',row.names(cra))
cra=sapply(cr,function(x) x$rank.theilsu)
source('~/.active-rstudio-document', echo=TRUE)
View(cra.mt)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(CS)
View(cra.mt)
View(best)
View(cra.mt)
View(cra.mt)
View(best)
load("~/GitHub/zeit-2/Results/aicIP_h15.RData")
names(forecast.all)
DirCode='C:/Users/Dirk/Documents/GitHub/zeit-2'
# DirCode='h:/Git/zeit-2'
# sourcing necassary scripts for estimation and forecast (for a description see "olsbmalag.Rmd")
auxcodedir=paste(DirCode,'/code/auxiliary code',sep='')
source(paste(auxcodedir,'/lag.exact.R',sep=''))
source(paste(auxcodedir,'/diff.R',sep=''))
source(paste(auxcodedir,'/chg.R',sep=''))
source(paste(auxcodedir,'/bmafo.R',sep=''))
source(paste(auxcodedir,'/olsbic3.R',sep=''))
source(paste(auxcodedir,'/olsbic1setgetting2.R',sep=''))
source(paste(auxcodedir,'/elanet.ind.R',sep=''))
library('glmnet')
library('elasticnet')
library('glmulti')
library('BMS')
# setting some values
# horizon=1 # inflation is published with on month lag, but in the following, the variables
# are only lagged.
zeitraus=1 # disregard zeit and rword indicator
target='CPI.EX' # core inflation
target='IP'
ic='aic'
disregard='IP.CONST'# a variable that is a nearly perfect substitute for target.
max.lag=12 # maximum lag length to be considered
max.obs=59 # maximum number of past observations to be considered (rolling estimation);
# setting negative window turns that of (recursive estimation)
# rolling window size will be: max.obs-max.lag-horizon, as lags need to be considered for
# estimation.
start.2001.2=1 # data used starting in 2001:1 as media data are avaiable from here
# loading realtime data sets and unrevised data
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
df.unrevised=read.csv(paste(DirCode,'/data/data.csv'
,sep='')
,sep=','
,na.strings='NA'
,row.names=1
,stringsAsFactors=FALSE
)
# dates as row.names, dates out of df
dat.col=(grep('ym',colnames(df.unrevised))+1):ncol(df.unrevised)
row.names(df.unrevised)=df.unrevised[,'ym']
df.unrevised=df.unrevised[,dat.col]
rm(dat.col)
zeit.ind=grep('zeit',colnames(df.unrevised))
colnames(df.unrevised)=gsub('-','\\.',colnames(df.unrevised))
overview=read.csv(paste(DirCode,'/data/metadata.csv',sep=''),row.names=1)
row.names(overview)=gsub('-','\\.',row.names(overview))
# replacing "." with "-" and getting vector of names
names.nr=colnames(df.unrevised)
# names.nr[-grep('MT',names.nr)]=gsub('\\.','-',names.nr[-grep('MT',names.nr)])
# colnames(df.unrevised)=names.nr
# names.nr[grep('zeit',names.nr)]=gsub('-','\\.',names.nr[grep('zeit',names.nr)])
# getting overview of non-revised data
overview.nr=overview[names.nr,]
# Saving a complete version of unrevised data (below, some of them are lagged to take account of realtime publication lags)
df.unrevised.compl=df.unrevised # df.unrevised=df.unrevised.compl
if (zeitraus==1){
df.unrevised=df.unrevised[,-grep('zeit|rword',colnames(df.unrevised)),]
overview=overview[-grep('zeit|rword',row.names(overview)),]
overview.nr=overview.nr[-grep('zeit|rword',row.names(overview.nr)),]
names.nr=names.nr[-grep('zeit|rword',names.nr)]
}
target='IP'
# target='CPI.EX'
max.hor=15
rec=0
plag=2 # publication lag
library(stringr)
library(glmulti)
auxcodedir=paste(DirCode,'/code/auxiliary code',sep='')
source(paste(auxcodedir,'/lag.exact.R',sep=''))
source(paste(DirCode,'/Code/Clark_West_Test/f_Newey_West_vector.r',sep='') )
source(paste(DirCode,'/Code/Clark_West_Test/f_Clark_West_Test.r',sep=''))
source(paste(auxcodedir,'/olsself.R',sep=''))
source(paste(DirCode,'/Code/giacomini rossi/FB_Wald_CI.r',sep=''))
# creating aggregation matrix
firstyear=1990
lastyear=2015
nyear=lastyear-firstyear+1
cs=list()
mt=list()
rs=list()
cr=list()
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
data$datE=paste(data$year,data$m,sep='-')
# get ecri recession dates
ecri=read.csv(paste(DirCode,'/data/ecri/ecri.csv',sep=''),row.names=1)
row.names(ecri)=gsub('15/','',row.names(ecri))
t1=t(matrix(unlist(strsplit(row.names(ecri),'/')),nrow=2))
row.names(ecri)=apply(t1,1,function(x) paste(x[2],x[1],collapse='',sep='-'))
data[data$ym%in%row.names(ecri),'ecri']=ecri[,1]
# transformation function
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
row.names(var.used)=gsub('-','\\.',row.names(var.used))
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
# transform the data accordingly
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
target.df=data[data$eval,c(target,'set-target')]
h=1 #
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
data$datE=paste(data$year,data$m,sep='-')
# get ecri recession dates
ecri=read.csv(paste(DirCode,'/data/ecri/ecri.csv',sep=''),row.names=1)
row.names(ecri)=gsub('15/','',row.names(ecri))
t1=t(matrix(unlist(strsplit(row.names(ecri),'/')),nrow=2))
row.names(ecri)=apply(t1,1,function(x) paste(x[2],x[1],collapse='',sep='-'))
data[data$ym%in%row.names(ecri),'ecri']=ecri[,1]
# transformation function
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
row.names(var.used)=gsub('-','\\.',row.names(var.used))
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
# transform the data accordingly
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
View(data)
DirCode='h:/Git/zeit-2'
DirCode='C:/Users/Dirk/Documents/GitHub/zeit-2'
target='IP'
# target='CPI.EX'
max.hor=15
rec=0
plag=2 # publication lag
library(stringr)
library(glmulti)
auxcodedir=paste(DirCode,'/code/auxiliary code',sep='')
source(paste(auxcodedir,'/lag.exact.R',sep=''))
source(paste(DirCode,'/Code/Clark_West_Test/f_Newey_West_vector.r',sep='') )
source(paste(DirCode,'/Code/Clark_West_Test/f_Clark_West_Test.r',sep=''))
source(paste(auxcodedir,'/olsself.R',sep=''))
source(paste(DirCode,'/Code/giacomini rossi/FB_Wald_CI.r',sep=''))
# creating aggregation matrix
firstyear=1990
lastyear=2015
nyear=lastyear-firstyear+1
cs=list()
mt=list()
rs=list()
cr=list(
)
h=1 #
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
data$datE=paste(data$year,data$m,sep='-')
# get ecri recession dates
ecri=read.csv(paste(DirCode,'/data/ecri/ecri.csv',sep=''),row.names=1)
row.names(ecri)=gsub('15/','',row.names(ecri))
t1=t(matrix(unlist(strsplit(row.names(ecri),'/')),nrow=2))
row.names(ecri)=apply(t1,1,function(x) paste(x[2],x[1],collapse='',sep='-'))
data[data$ym%in%row.names(ecri),'ecri']=ecri[,1]
# transformation function
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
row.names(var.used)=gsub('-','\\.',row.names(var.used))
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
# transform the data accordingly
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
target.df=data[data$eval,c(target,'set-target')]
View(data)
h=15
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
data$datE=paste(data$year,data$m,sep='-')
# get ecri recession dates
ecri=read.csv(paste(DirCode,'/data/ecri/ecri.csv',sep=''),row.names=1)
row.names(ecri)=gsub('15/','',row.names(ecri))
t1=t(matrix(unlist(strsplit(row.names(ecri),'/')),nrow=2))
row.names(ecri)=apply(t1,1,function(x) paste(x[2],x[1],collapse='',sep='-'))
data[data$ym%in%row.names(ecri),'ecri']=ecri[,1]
# transformation function
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
row.names(var.used)=gsub('-','\\.',row.names(var.used))
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
# transform the data accordingly
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
target.df=data[data$eval,c(target,'set-target')]
View(data)
h=1
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
data$datE=paste(data$year,data$m,sep='-')
# get ecri recession dates
ecri=read.csv(paste(DirCode,'/data/ecri/ecri.csv',sep=''),row.names=1)
row.names(ecri)=gsub('15/','',row.names(ecri))
t1=t(matrix(unlist(strsplit(row.names(ecri),'/')),nrow=2))
row.names(ecri)=apply(t1,1,function(x) paste(x[2],x[1],collapse='',sep='-'))
data[data$ym%in%row.names(ecri),'ecri']=ecri[,1]
# transformation function
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
row.names(var.used)=gsub('-','\\.',row.names(var.used))
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
# transform the data accordingly
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
target.df=data[data$eval,c(target,'set-target')]
View(data)
h=15
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
data$datE=paste(data$year,data$m,sep='-')
# get ecri recession dates
ecri=read.csv(paste(DirCode,'/data/ecri/ecri.csv',sep=''),row.names=1)
row.names(ecri)=gsub('15/','',row.names(ecri))
t1=t(matrix(unlist(strsplit(row.names(ecri),'/')),nrow=2))
row.names(ecri)=apply(t1,1,function(x) paste(x[2],x[1],collapse='',sep='-'))
data[data$ym%in%row.names(ecri),'ecri']=ecri[,1]
# transformation function
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
row.names(var.used)=gsub('-','\\.',row.names(var.used))
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
# transform the data accordingly
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
targetcol=grep(paste(target,'$',sep=''),colnames(data))
data$eval=is.na(data[,targetcol])==F&is.na(data$'set-target')==F
target.df=data[data$eval,c(target,'set-target')]
View(data)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source('~/GitHub/zeit-2/code/code for getting and preparing ZEIT articles/Bind_articles_together.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
subd
warnings()
grep(subd,listsubdirs)
length(listsubdirs)
subd
listsubdirs[716]
listfiles=dir(paste(DirRawTexts,'/',subd,sep=''))
listplaintexts=listfiles[grep('plaintxt',listfiles)]
ids=gsub('plaintxt','',listplaintexts)
ids=gsub('.txt','',ids)
ids=gsub('^-','',ids)
# Texts with multiple pages -----------------------------------------------
mtext=ids[grep('-',ids)]
mtext=strsplit(mtext,'-')
mtext=t(sapply(mtext,function(x){as.numeric(x[1:2])}))
if (!length(mtext)==0){
idsm=unique(mtext[,1])
idsm=sort(idsm)
}
# Files with just one page ------------------------------------------------
if (!length(mtext)==0){stext=as.numeric(ids[-grep('-',ids)])}else{
stext=ids
}
if (!length(mtext)==0){stext=stext[(stext%in%idsm)==0]} # wenn es texte mit mehreren seiten gibt
stext=sort(stext)
# onepager: copy plaintexts into articles  --------------------------------
for (i in 1:length(stext)){
file.copy(paste(DirRawTexts,'/',subd,'/','plaintxt-',stext[i],'.txt',sep=''),
paste(DirRawTexts,'/',subd,'/','article-',stext[i],'.txt',sep='')
,overwrite=T)
}
rm(i)
if (!length(mtext)==0){
for (i in 1:length(idsm)){
nidsm=nrow(mtext[mtext[,1]==idsm[i],]) # number of pages
article=character(nidsm)
for (page in 1:nidsm){
article[page]=readLines(paste(DirRawTexts,'/',subd,'/','plaintxt-',idsm[i],'-',page,'.txt',sep=''),encoding='UTF-8')
}
article=paste(article,sep="",collapse="")
#                         if (nchar(as.character(register$title[idsm[i]]))<120){
#                                 article=gsub(register$title[idsm[i]],'',article)
#                         }
write.csv(article,
paste(DirRawTexts,'/',subd,'/','article-',idsm[i],'.txt',sep=''),
,fileEncoding='UTF-8'
,quote=F
)
}
}
head(idsm)
head(mtext)
head(ids)
head(idsm)
head(mtext)
View(mtext)
View(stext)
head(article)
mtext=ids[grep('-',ids)]
mtext=strsplit(mtext,'-')
View(mtext)
mtext=t(mtext)
View(mtext)
mtext=ids[grep('-',ids)]
mtext=strsplit(mtext,'-')
mtext=t(lapply(mtext,function()))
mtext=t(lapply(mtext,function(x))
mtext=t(lapply(mtext,function(x)x))
mtext=ids[grep('-',ids)]
mtext=strsplit(mtext,'-')
mtext=t(lapply(mtext,function(x)x))
mtext=ids[grep('-',ids)]
mtext=strsplit(mtext,'-')
head(mtext)
mtext
sapply(mtext,function(x))
sapply(mtext,function(x)x)
mtext=ids[grep('-',ids)]
mtext=strsplit(mtext,'-')
mtext=t(sapply(mtext,function(x)x))
idsm=unique(mtext[,1])
idsm
head(idsm)
idsm[1:3,1:3]
head(mtext)
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/zeit-2/code/bewertung ZEIT/SentiWS_Zeit_qdap.R', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
library('qdap')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
library("qdap", lib.loc="~/R/win-library/3.0")
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)

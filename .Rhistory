npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
t=sentproc(x)
t
auto.sent=lapply(as.character(df[,'Text']),sentiment,valueword)
auto.sent[2]
sentproc(aut.sent[1])
sentproc(auto.sent[1])
sentproc(auto.sent[[1]])
t=sentproc(auto.sent[[1]])
t
t=sentproc(auto.sent[[10]])
t
result=sapply(auto.sent,sentproc)
View(result)
result=data.frame(t(sapply(auto.sent,sentproc)))
View(result)
str(result)
result=data.frame(t(sapply(auto.sent,function(x) sentproc(x))))
str(result)
View(result)
result=t(sapply(auto.sent,function(x) sentproc(x)))
test=as.numeric(result)
test=as.numeric(data.frame(result))
result=t(sapply(auto.sent,function(x) sentproc(x)))
test=sapply(result,function(x) x)
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=matrix(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
result=t(sapply(auto.sent,function(x) sentproc(x)))
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=c(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
result=t(sapply(auto.sent,function(x) sentproc(x)))
View(result)
View(df)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
View(df)
grep('SN|JM|DC',colnames(df))
df[,-grep('SN|JM|DC',colnames(df))]
df=df[,-grep('SN|JM|DC',colnames(df))]
View(df)
load("H:/git/zeit-2/annotationen_JMincomp.csv")
load("H:/git/zeit-2/annotationen_JMincomp.csv")
DC <- read.csv("H:/git/zeit-2/Data/goldstandard/DC.csv")
View(DC)
colnames(DC)
DC=DC[,c('Artikeln.Nr','Bewertung','Zeitbezug','Thematische.Bewertung']
DC=DC[,c('Artikeln.Nr','Bewertung','Zeitbezug','Thematische.Bewertung')]
DC=DC[,c('Artikeln.Nr.','Bewertung','Zeitbezug','Thematische.Bewertung')]
JM <- read.csv("H:/git/zeit-2/Data/goldstandard/JM.csv")
JM=JM[,c('Artikeln.Nr.','Bewertung','Zeitbezug','Thematische.Bewertung')]
SN <- read.csv("H:/git/zeit-2/Data/goldstandard/SN.csv")
colnames(JM)=c('Nr','DC','DC.Zeitbezug','DC.Thema')
colnames(Dc)=c('Nr','DC','DC.Zeitbezug','DC.Thema')
colnames(DC)=c('Nr','DC','DC.Zeitbezug','DC.Thema')
colnames(JM)=c('Nr','JM','JM.Zeitbezug','JM.Thema')
colnames(SN)=c('Nr','SN','SN.Zeitbezug','SN.Thema')
df.t=cbind(SN,JM[,-1],DC[,-1],df)
View(df.t)
View(SN)
SN <- read.csv("H:/git/zeit-2/Data/goldstandard/SN.csv")
View(SN)
SN=SN[,c('Artikeln.Nr.','Bewertung','Zeitbezug','Thematische.Bewertung')]
colnames(SN)=c('Nr','SN','SN.Zeitbezug','SN.Thema')
View(SN)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
df=df[,-grep('SN|JM|DC',colnames(df))]
df.t=cbind(SN,JM[,-1],DC[,-1],df)
View(df.t)
df=df[,-1]
View(df)
View(df.t)
df.t=df.t[,-1]
View(df.t)
grep('SN|JM|DC',colnames(df.t))
grep('SN$|JM|DC',colnames(df.t))
grep('SN$|JM$|DC$',colnames(df.t))
colnames(df.t)[c(1,4,7)]
grep('Artikeln.Nr.|SN$|JM$|DC$',colnames(df.t))
grep('Artikeln_Nr|SN$|JM$|DC$',colnames(df.t))
grep('Artikeln_Nr|Abschnitt|SN$|JM$|DC$',colnames(df.t))
erst=grep('Artikeln_Nr|Abschnitt|SN$|JM$|DC$',colnames(df.t))
df.t=cbind(df.t[,erst],df.t[,-erst])
View(df.t)
getwd()
setwd(DirCode)
getwd()
dput(df.t,'Annotatoren.RData')
write.csv(df.t,'Annotatoren.csv',sep=';')
df=read.csv(paste(DirGold,'Annotatoren.csv',sep=''),sep=';')
View(df)
df=read.csv(paste(DirGold,'Annotatoren.csv',sep=''))
View(df)
df=cbind(t(sapply(auto.sent,function(x) sentproc(x))),df)
sentiment<-function (text, valueword){
# returns the word, value, stem,
# form and frequency of each sentiment word in text
# in the data.frame valdf. And, it returns the total
# number of words in text
# as integer nword.
if (length(text) == 2 & text[1] == ",x") {
text = text[2]
}
text.split = sapply(strsplit(text, " "), function(x) x)
ind = valueword[, 1] %in% text.split
valdf = valueword[ind, , drop = F]
valdf$h = sapply(valueword[ind, 1], function(x) sum(text.split%in%x))
nwords = length(text.split)
return(list(valdf,nwords))
}
auto.sent=lapply(as.character(df[,'Text']),sentiment,valueword)
# function to process the data
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a vector comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=c(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
df=cbind(t(sapply(auto.sent,function(x) sentproc(x))),df)
View(df)
df$X=NULL
df.art=data.frame(nword=aggregate(df$nwords,list(df$Artikeln_Nr),sum))
df.art$JM=aggregate(df$nwords*df$JM,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$SN=aggregate(df$nwords*df$SN,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$DC=aggregate(df$nwords*df$DC,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$auto.rvalues=aggregate(df$value,list(df$Artikeln_Nr),mean)[,2]
df.art=data.frame(nword=aggregate(df$nword,list(df$Artikeln_Nr),sum))
df.art$JM=aggregate(df$nwords*df$JM,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$SN=aggregate(df$nwords*df$SN,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$DC=aggregate(df$nwords*df$DC,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$auto.rvalues=aggregate(df$value,list(df$Artikeln_Nr),mean)[,2]
source('~/GitHub/mti/making index.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(all)
browseVignettes(package = 'qdap')
source('~/.active-rstudio-document', echo=TRUE)
install.packages("tm.plugin.sentiment")
library("qdap", lib.loc="~/R/win-library/3.0")
library("qdapDictionaries", lib.loc="~/R/win-library/3.0")
data(amplification.words)
amplification.words
View(df)
v <- with(df, wfm(Text, list(SN.Zeitbezug)))
with(sentSplit(df), polarity(Text))
?sentSplit
sentSplit(DATA, "state", stem.col = TRUE)
DATA
df$person='aaa'
dfn=cbind(df$Text,df$person)
View(dfn)
dfn=data.frame(df$Text,df$person)
View(dfn)
dfn=data.frame(person=df$person,text=df$Text)
View(dfn)
dfn=data.frame(person=1:nrow(df),text=df$Text)
View(dfn)
dfn$person=as.character(dfn$person)
test=sentSplit(dfn)
test=sentSplit(dfn,'person')
with(test,polarity)
with(test,polarity(Text))
View(test)
with(test,polarity(text))
test=sentSplit(dfn,'text')
View(test)
with(test,polarity(text))
out=with(test,polarity(text))
plot(out)
out
mean(df$auto)
colnames(df)
mean(df$value)
POLENV <- polarity_frame(positive.words, negative.words)
POLENV
ls(POLENV)[1:20]
out=with(test,polarity.frame(text))
t=POLENV
t=list(t)
t
t[1]
library("XML", lib.loc="~/R/win-library/3.0")
url='https://r-forge.r-project.org/R/?group_id=1048'
test=readHTMLTable(url)
unlink(url)
View(valueword)
polarity.f=data.frame(valueword[,1:2,keep=T])
polarity.f=data.frame(valueword[,1:2])
View(polarity.f)
pos=valueword['wert'>0,1:2]
pos
pos=valueword['wert'>0,1]
pos.w=valueword['wert'>0,2]
neg=valueword['wert'<0,1]
neg.w=valueword['wert'<0,2]
pf=polarity_frame(pos,neg,pos.w,neg.w)
pf=polarity_frame(data.frame(pos),neg,pos.w,neg.w)
?data.frame
neg.w=valueword['wert'<0,2,drop=F]
neg.w=valueword['wert'<0,2]
pos=valueword['wert'>0,1]
pos.w=valueword['wert'>0,2]
neg=valueword['wert'<0,1]
neg.w=valueword['wert'<0,2]
pos=valueword['wert'>0,1,drop=T]
pos=as.character(valueword['wert'>0,1,drop=T])
neg=as.character(valueword['wert'<0,1])
valueword['wert'<0,1]
neg=as.character(valueword['wert'<0,1,drop=T])
View(valueword)
tail(valueword)
pos=as.character(valueword['wert'>0,'wort',drop=T])
pos.w=valueword['wert'>0,'wert']
neg=as.character(valueword['wert'<0,'wort',drop=T])
neg=as.character(valueword[valueword$wert<0,'wort',drop=T])
neg.w=valueword[valueword[valueword$wert<0,'wert']
neg.w=valueword[valueword$wert<0,'wert']
pf=polarity_frame(pos,neg,pos.w,neg.w)
out=with(test,polarity.frame(df))
out=with(test,polarity.frame=df)
out=with(test,df)
View(out)
dd=with(test,df)
View(dd)
test
dfn
View(out)
with(test,df)
tt=df$Text[1]
tt
tt=paste(df$Text[1:10],collapse=' ')
ttt=sentSplit(tt)
str(tt)
test=sentSplit(dfn,'text')
View(dfn)
test=sentSplit(dfn,'text')
polarity(test)
polarity(test,polarity.frame=pf)
View(test)
polarity(test,polarity.frame=pf,amplifier.weight=0,n.before=0,n.after=0)
View(test)
ttt=sentiment(test$text,valueword)
View(ttt[[1]])
View(ttt[1])
str(ttt)
a=sapply(ttt,function(x) x)
ttt=sapply(test$text,sentiment,valueword)
tt=sapply(ttt,function(x) sum(x$wert))
tt=sapply(ttt,function(x) sum(x[1]$wert))
tt=sapply(ttt,function(x) x[1])
str(tt)
sentiment
tt=sapply(ttt,function(x) sum(x$valdf$wert))
tt=sapply(ttt,function(x) x$valdf)
tp=polarity(test,polarity.frame=pf,amplifier.weight=0,n.before=0,n.after=0)
str(tp)
pf=polarity_frame(pos,neg,pos.w,neg.w,env=F)
View(pf)
tail(pf)
head(pf)
View(pf)
t4=tp$all
View(`t4`)
tp$group
View(test)
test=sentSplit(dfn$text)
?sentSplit
sentSplit(DATA, "state"))
sentSplit(DATA, "state")
DATA
with(DATA, polarity(state, list(sex, adult)))
with(sentSplit(DATA, 4), polarity(state, person))
tp=polarity(test[,3],polarity.frame=pf,amplifier.weight=0,n.before=0,n.after=0)
tpa=tp$all
View(tpa)
test=sentSplit(df,"Text")
View(test)
tp=polarity(df$'text.var',polarity.frame=pf,amplifier.weight=0,n.before=0,n.after=0)
View(test)
tp=polarity(df$'Text',polarity.frame=pf,amplifier.weight=0,n.before=0,n.after=0)
tpa=tp$all
View(tpa)
View(df)
View(tpa)
View(df)
df$pola=(df$pvalue+df$nvalue)/(df$pvalue-df$nvalue)
df$pola[1]
df$pola[2]
head(df$pola)
df$pola=(df$pvalue-df$nvalue)/(df$pvalue+df$nvalue)
head(df$pola)
sentiment(df$Text[1],valueword)[1]
sentiment(df$Text[2],valueword)[1]
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
df$pola=(df$pvalue-df$nvalue)/(df$pvalue+df$nvalue)/n^.5
df$pola=(df$pvalue-df$nvalue)/(df$pvalue+df$nvalue)/df$nword^.5
df$pola[1]
df$pola=(df$pvalue+df$nvalue)/(df$pvalue-df$nvalue)/df$nword^.5
head(df$pola)
df$pol=df$value/df$nword
head(df$pol)
df$pol=df$value/df$nword^.5
head(df$pol)
sentiment(df$Text[3],valueword)[1]
test=tolower(valueword$wort)
tt=unique(test)
tt=duplicate(test)
?unique
tt=duplicated(test)
tt
vv=test[tt]
vv
to.lower(pos)
tolower(pos)
neg=tolower(neg)
pf=polarity_frame(pos,neg,pos.w,neg.w,env=F)
test=sentSplit(df,"Text")
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
df=cbind(df,tpa$polarity*tpa$wc^.5)
View(df)
df=cbind(qdpola=tpa$polarity*tpa$wc^.5,df)
View(df)
View(test)
polarity
?end_inc
end_inc
pos=as.character(valueword['wert'>0,'wort',drop=T])
# pos=tolower(pos)
pos.w=valueword['wert'>0,'wert']
neg=as.character(valueword[valueword$wert<0,'wort',drop=T])
# neg=tolower(neg)
neg.w=valueword[valueword$wert<0,'wert']
pf=polarity_frame(pos,neg,pos.w,neg.w,env=F)
# splittet den text in sätzte auf und fügt $tot hinzu zur paragraph zuordnung
test=sentSplit(df,"Text")
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
hash
View(pf)
polarity.frame=pf
tt=hash(polarity.frame)
tt
View(tt)
tt[1]
View(pf)
posneg <- ls(polarity.frame)
posneg
View(pf)
strip
strip=function (x, char.keep = "~~", digit.remove = TRUE, apostrophe.remove = TRUE,
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
df=cbind(qdpola=tpa$polarity*tpa$wc^.5,df)
View(df)
View(tpa)
source('~/.active-rstudio-document', echo=TRUE)
Trim
tp=polarity(df$'Text',polarity.frame=pf,lower.case=F)
View(tpa)
lower.case
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
tp=polarity(df$'Text',polarity.frame=pf,lower.case=F)
tpa=tp$all
tp=polarity(df$'Text',polarity.frame=pf,lower.case=F)
tpa=tp$all
tp=polarity(df$'Text',polarity.frame=pf)
test=sentSplit(df,"Text")
View(tpa)
tp=polarity(df$'Text',polarity.frame=pf)
rm(polarity)
tp=polarity(df$'Text',polarity.frame=pf)
rm(polarity.frame)
View(tpa)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
View(df)
source('~/.active-rstudio-document', echo=TRUE)
environment(strip) <- qdap
polarity
strip
strip.s=strip
rm(strip)
strip
strip=strip.s
environment(strip) <- namespace:qdap
environment(strip) <- 'qdap'
?environment
environment()
environment(2)
environment(strip) <- <qdap>
?eval
?assignInNamespace
assignInNamespace('strip',strip,'qdap')
rm(strip)
strip
library()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getFromNamespace('strip','qdap')
?Trim
?strp
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
assignInNamespace('strip',strip,'qdap')
getFromNamespace('strip','qdap')
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
detach("package:qdap", unload=TRUE)
library("qdap", lib.loc="~/R/win-library/3.0")
getFromNamespace('strip','qdap')
source('~/.active-rstudio-document', echo=TRUE)
assignInNamespace('strip',strip,'qdap')
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
source('~/.active-rstudio-document', echo=TRUE)
assignInNamespace('strip',strip,'qdap')
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
test=sentSplit(df,"Text")
tp=polarity(test,polarity.frame=pf)
tpa=tp$all
str(tp)
tp
polarity
source('~/.active-rstudio-document', echo=TRUE)
tp=polarity(test,polarity.frame=pf)
rm(polarity)
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
source('~/.active-rstudio-document', echo=TRUE)
assignInNamespace('strip',strip,'qdap')
tp=polarity(test,polarity.frame=pf)
tpa=tp$all
View(tpa)
tp=polarity(test,polarity.frame=pf)
tpa=tp$all
View(tpa)
tp=polarity(df$'Text',polarity.frame=pf)
tpa=tp$all
View(tpa)
df=cbind(qdpola=tpa$polarity*tpa$wc^.5,df)
View(df)

# Saving a complete version of unrevised data (below, some of them are lagged to take account of realtime publication lags)
df.unrevised.compl=df.unrevised # df.unrevised=df.unrevised.compl
# getting vintage dates
# first: changing vint.names to correspond to other date format
vint.names=names(sets)
vint.names=gsub('-31','',vint.names)
tt=strsplit(vint.names,'-')
tt=t(sapply(tt,function(x)x))
for (i in 1:nrow(tt)){if (nchar(tt[i,2])==1){tt[i,2]=paste('0',tt[i,2],sep='')}}
vint.names=paste(tt[,1],tt[,2],sep='-')
names(sets)=vint.names
# # getting names of realtime variables and replace code by names in sets
# set1=sets[[1]]
# rt.code=colnames(set1)
# all sets have the same codes in the same order?
test=t(sapply(sets,function(x) colnames(x)))
rt.code=test[1,]
# matching codes and names
overview.rt=overview[overview$code%in%rt.code,]
# which names correspond to the codes
name.num=unlist(sapply(rt.code,function(x) which(x==overview.rt$code)))
rt.names=row.names(overview.rt)[name.num]
for (i in 1:length(sets)){colnames(sets[[i]])=rt.names}
#making a copy
sets.s=sets #sets=sets.s
push.down=function(variable,set){
# pushes all variables to the forecast origin so that data with publication
# lag may be used nontheless for forecasting.
aux=set[,variable]
naux=length(aux)
values=aux[is.na(aux)==F]
nvalues=length(values)
aux2=rep(NA,naux)
aux2[(naux-nvalues+1):naux]=values
return(aux2)
}
forecast.all=vector('list',length(sets))
# defining the results to be extracted from estimated models
extract.ar=c('fc','horizon','nobs','msr','p1','names')
extract=c('fc','horizon','nobs','msr','p1','p2','names')
vint.num=1
set.rt=sets[[vint.num]]
set.last.date=names(sets[vint.num])
set.lst.obs=grep(set.last.date,row.names(set.rt))
set.rt=set.rt[1:set.lst.obs,]
set.unrevised=df.unrevised[row.names(set.rt),]
set=cbind(set.rt,set.unrevised)
(length(disregard)>0)
col.disregard=which(colnames(set)==disregard)
set=set[,-col.disregard]
row.disregard=which(row.names(overview)==disregard)
overview.d=overview[row.disregar,]
overview.d=overview[row.disregard,]
overview.d
overview=overview[-row.disregard,]
row.disregard=which(row.names(overview.rt)==disregard)
row.disregard
View(overview.rt)
source('~/.active-rstudio-document', echo=TRUE)
View(xx)
i
olsbic1setgetting2(y,xx,horizon,max.lag,p1=p1)[extract]
xx
load("H:/git/zeit-2/Results/IP_h3.RData")
names(forecast.all)
names(forecast.all[[1]])
names(forecast.all[1])
test=forecast.all[[1]]
View(test)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
DirCode='h:/Git/zeit-2'
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
# DirCode='C:/Users/Dirk/Documents/GitHub/zeit-2'
DirCode='h:/Git/zeit-2'
# sourcing necassary scripts for estimation and forecast (for a description see "olsbmalag.Rmd")
auxcodedir=paste(DirCode,'/code/auxiliary code',sep='')
source(paste(auxcodedir,'/lag.exact.R',sep=''))
source(paste(auxcodedir,'/diff.R',sep=''))
source(paste(auxcodedir,'/chg.R',sep=''))
source(paste(auxcodedir,'/bmafo.R',sep=''))
source(paste(auxcodedir,'/olsbic3.R',sep=''))
source(paste(auxcodedir,'/olsbic1setgetting2.R',sep=''))
# setting some values
horizon=8 # inflation is published with on month lag, but in the following, the variables
# are only lagged.
target='IP' # core inflation
disregard='IP-CONST'# a variable that is a nearly perfect substitute for target.
max.lag=12 # maximum lag length to be considered
max.obs=48 # maximum number of past observations to be considered (rolling estimation);
# setting negative window turns that of (recursive estimation)
# rolling window size will be: max.obs-max.lag-horizon, as lags need to be considered for
# estimation.
# loading realtime data sets and unrevised data
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
df.unrevised=read.csv(paste(DirCode,'/data/data.csv'
,sep='')
,sep=','
,na.strings='NA'
,row.names=1
,stringsAsFactors=FALSE
)
# dates as row.names, dates out of df
dat.col=(grep('ym',colnames(df.unrevised))+1):ncol(df.unrevised)
row.names(df.unrevised)=df.unrevised[,'ym']
df.unrevised=df.unrevised[,dat.col]
overview=read.csv(paste(DirCode,'/data/metadata.csv',sep=''),row.names=1)
# replacing "." with "-" and getting vector of names
names.nr=colnames(df.unrevised)
names.nr[-grep('MT',names.nr)]=gsub('\\.','-',names.nr[-grep('MT',names.nr)])
colnames(df.unrevised)=names.nr
# getting overview of non-revised data
overview.nr=overview[names.nr,]
# Saving a complete version of unrevised data (below, some of them are lagged to take account of realtime publication lags)
df.unrevised.compl=df.unrevised # df.unrevised=df.unrevised.compl
# getting vintage dates
# first: changing vint.names to correspond to other date format
vint.names=names(sets)
vint.names=gsub('-31','',vint.names)
tt=strsplit(vint.names,'-')
tt=t(sapply(tt,function(x)x))
for (i in 1:nrow(tt)){if (nchar(tt[i,2])==1){tt[i,2]=paste('0',tt[i,2],sep='')}}
vint.names=paste(tt[,1],tt[,2],sep='-')
names(sets)=vint.names
# all sets have the same codes in the same order?
test=t(sapply(sets,function(x) colnames(x)))
# replace code by names in sets
rt.code=test[1,]
# matching codes and names
overview.rt=overview[overview$code%in%rt.code,]
# which names correspond to the codes
name.num=unlist(sapply(rt.code,function(x) which(x==overview.rt$code)))
rt.names=row.names(overview.rt)[name.num]
for (i in 1:length(sets)){colnames(sets[[i]])=rt.names}
#making a copy
sets.s=sets #sets=sets.s
push.down=function(variable,set){
# pushes all variables to the forecast origin so that data with publication
# lag may be used nontheless for forecasting.
aux=set[,variable]
naux=length(aux)
values=aux[is.na(aux)==F]
nvalues=length(values)
aux2=rep(NA,naux)
aux2[(naux-nvalues+1):naux]=values
return(aux2)
}
forecast.all=vector('list',length(sets))
# defining the results to be extracted from estimated models
extract.ar=c('fc','horizon','nobs','msr','p1','names')
extract=c('fc','horizon','nobs','msr','p1','p2','names')
# drop DISREGARD from overiew.
if (length(disregard)>0){
row.disregard=which(row.names(overview)==disregard)
overview.d=overview[row.disregard,] # needed below
overview=overview[-row.disregard,]
if (overview.d$Source=='Buba RTDB'){
row.disregard=which(row.names(overview.rt)==disregard)
overview.rt=overview.rt[-row.disregard,]
}else{
row.disregard=which(row.names(overview.nr)==disregard)
overview.nr=overview.nr[-row.disregard,]
}
}
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
DirCode='h:/Git/zeit-2'
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
load("H:/git/zeit-2/Results/IP_h3.RData")
set=sets[length(sets)]
set=sets[[length(sets)]]
View(set)
View(var.used)
DirCode='h:/Git/zeit-2'
# get last vintage
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
y.fin.col=grep(var.used[target,Code],colnames(set))
y.fin.col=grep(var.used[target,code],colnames(set))
y.fin.col=grep(var.used[target,'code'],colnames(set))
target='IP'
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
View(y.fin)
plot(y.fin)
colnames(y.fin)=target
View(y.fin)
View(y.fin)
h=3
load(paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
res.file=paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
load(res.file)
names(sets)[1]
gsub('-31','',names(sets)[1]
gsub('-31','',names(sets)[1])
fst.vint=gsub('-31','',names(sets)[1])
lst=gsub('-31','',names(sets)[length(sets)])
lst
plag=2
vint=gsub('-31','',names(sets))
vint
vint=data.frame(gsub('-31','',names(sets)))
vint=data.frame(date=gsub('-31','',names(sets)))
aux=strsplit(vint$date,'-')
vint$date
vint=data.frame(date=gsub('-31','',names(sets)),stringsAsFactors=F)
aux=strsplit(vint$date,'-')
aux=sapply(aux,function(x) x)
View(aux)
aux=t(sapply(aux,function(x) x))
vint[,c('y','m')]
vint[,c('y','m')]=aux
View(vint)
aux=strsplit(vint$date,'-')
aux=t(sapply(aux,function(x) x))
View(aux)
vint[,c('y','m')]=aux
View(vint)
aux=as.Date(vint$date)
?as.Date
aux=as.Date(vint$date,'%y-%m')
aux[1]
aux=as.Date(vint$date,'%Y-%m')
aux
vint$date[1]
as.Date("2005-12",'%Y-%m')
as.Date("2005-12",'%Y')
as.Date("2005-12",'%Y\\-%m')
?strpad
str_pad(3,0)
?str_pad
library(stringr)
?str_pad
str_pad('1','left','0')
str_pad('1',side='left','0')
str_pad('1',side='left','0',length=2)
str_pad(string='1',side='left',pad='0')
str_pad(string='1',2,side='left',pad='0')
vint[,'0m']= str_pad(string=vint$m,2,side='left',pad='0')
View(vint)
vint$date=paste(vint$y,vint$0m,sep='-')
vint$date=paste(vint$y,vint$0m,sep='-')
vint$date=paste(vint$y,vint$'0m',sep='-')
View(vint)
vint$date=as.Date(vint$date,'%Y-%m')
View(vint)
vint=data.frame(date=gsub('-31','',names(sets)),stringsAsFactors=F)
aux=strsplit(vint$date,'-')
aux=t(sapply(aux,function(x) x))
vint[,c('y','m')]=aux
vint[,'0m']= str_pad(string=vint$m,2,side='left',pad='0')
aux=as.Date(vint$date,'%Y-%m')
vint$date=paste(vint$y,vint$'0m',sep='-')
vint$date[1]
t=vint$date[1]
as.Date(t,'%Y-%m')
?as.Date
as.Date(t,format='%Y-%m')
format(t,format='%Y-%m')
str(t)
tt=format(t,format='%Y-%m')
str(tt)
as.Date(tt)
t='2005/1'
as.Date(t,'%Y/%m')
t='2005/10'
as.Date(t,'%Y/%m')
as.Date('200501','%Y%m')
as.Date('200501',"%Y%m")
strDates <- c("01/05/1965", "08/16/1975")
dates <- as.Date(strDates, "%m/%d/%Y")
strDates <- c("05/1965", "08/1975")
dates <- as.Date(strDates, "%m/%Y")
as.Date('200501',"%Y%m")
as.Date("200501","%Y%m")
as.Date("05/2005","%m/%Y")
tt=as.Date("05/2005","%m/%Y")
tt
strDates <- c("05/2000", "08/1975")
dates <- as.Date(strDates, "%m/%Y")
strDates <- c("05/2005", "08/1975")
dates <- as.Date(strDates, "%m/%Y")
dates
?as.Date
as.Date('2005-02','%Y-%m')
as.Date("2005-02","%Y-%m")
str('2005-12')
as.Date('2005-12',format='%Y')
as.Date('2005-12',format='%Y %m')
as.Date('2005 12',format='%Y %m')
as.Date('2005 12',format='%Y %M')
as.Date('2005 12',format='%Y %m')
View(y.fin)
as.Date(row.names(y.fin))
as.Date(row.names(y.fin),"%Y-%m")
as.Date(row.names(y.fin),"Y-m")
as.Date(row.names(y.fin),"%Y")
vint$date=as.Date(vint$date,'%Y-%m-%d')
vint$date
vint=data.frame(date=gsub('-31','',names(sets)),stringsAsFactors=F)
aux=strsplit(vint$date,'-')
aux=t(sapply(aux,function(x) x))
vint[,c('y','m')]=aux
vint[,'0m']= str_pad(string=vint$m,2,side='left',pad='0')
aux=as.Date(vint$date,'%Y-%m')
vint$date=paste(vint$y,vint$'0m',sep='-')
vint$date
vint$date=paste(vint$y,vint$'0m','31',sep='-')
vint$date=as.Date(vint$date,'%Y-%m-%d')
vint$date
vint$date=paste(vint$y,vint$'0m','01',sep='-')
vint$date=as.Date(vint$date,'%Y-%m-%d')
vint=data.frame(date=gsub('-31','',names(sets)),stringsAsFactors=F)
aux=strsplit(vint$date,'-')
aux=t(sapply(aux,function(x) x))
vint[,c('y','m')]=aux
vint[,'0m']= str_pad(string=vint$m,2,side='left',pad='0')
aux=as.Date(vint$date,'%Y-%m')
vint$date=paste(vint$y,vint$'0m','01',sep='-')
vint$date=as.Date(vint$date,'%Y-%m-%d')
vint$date
format(vint$date,'%y%m'
)
# creating data.frame for pure data
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
firstyear=1948
lastyear=2015
nyear=lastyear-firstyear+1
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
View(data)
data[row.names(y.fin),target]=y.fin
View(data)
DirCode='h:/Git/zeit-2'
target='IP'
h=3 # horizon
plag=2 # publication lag
library(stringr)
# creating aggregation matrix
firstyear=1948
lastyear=2015
nyear=lastyear-firstyear+1
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
View(data)
data[data$ym==row.names(y.fin),target]=y.fin
data[which(data$ym==row.names(y.fin)),target]=y.fin
which(data$ym==row.names(y.fin))
data[data$ym%in%row.names(y.fin),target]=y.fin
View(data)
DirCode='h:/Git/zeit-2'
target='IP'
h=3 # horizon
plag=2 # publication lag
library(stringr)
# creating aggregation matrix
firstyear=1990
lastyear=2015
nyear=lastyear-firstyear+1
data=data.frame(m=rep(1:12,nyear)
,month=rep(c(paste(0,1:9,sep=''),paste(10:12)),nyear)
,year=rep(firstyear:lastyear,each=12))
data$ym=paste(data$year,data$month,sep='-')
# get last vintage (y.fin)
load(paste(DirCode,'/data/realtime_sets_cutoffday_31.RData',sep=''))
set=sets[[length(sets)]]
y.fin.col=grep(var.used[target,'code'],colnames(set))
y.fin=set[,y.fin.col,drop=F]
colnames(y.fin)=target
data[data$ym%in%row.names(y.fin),target]=y.fin
View(data)
res.file=paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
load(res.file)
names(sets)
gsub('-31','',names(sets))
str_pad(gsub('-31','',names(sets)),2,'0')
str_pad(gsub('-31','',names(sets)),2,'left','0')
View(data)
data$datE=paste(data$y,data$m,sep='-')
View(data)
data$datE=paste(data$year,data$m,sep='-')
View(data)
data[data$datE%in%gsub('-31','',names(sets)),'vint']
data[data$datE%in%gsub('-31','',names(sets)),'vint']=1
View(data)
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint+h-plag,'tdate']=1
View(data)
data$eval=is.na(data$'IP')==F&is.na(data$tdate)==F
View(data)
data[row.n.vint,'vint.num']=1:length(sets)
View(data)
View(data)
data[row.n.vint+h-plag,'tdate']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
View(data)
View(data)
target.df=data$eval*data[,target]
target.df$vint.num==data$'set-target'
target.df$vint.num=data$'set-target'
data$'set-target'
target.df=data.frame(target=data$eval*data[,target],vint.num=data$'set-target'
target.df=data.frame(target=data$eval*data[,target]
,vint.num=data$'set-target')
vint.num=data$'set-target'
target.df=data.frame(target=data$eval*data[,target],vint.num=data$'set-target')
View(target.df)
target.df=data.frame(target=data[data$eval,target],vint.num=data$'set-target')
data$eval
target=data[data$eval,target]
target.df=data.frame(target=data[data$eval,target],vint.num=data$'set-target')
target.df=data.frame(target=data[data$eval,target],vint.num=data[,'set-target'])
target.df=data.frame(target=data[data$eval,target],vint.num=data[,'set-target'])
data[data$eval,target]
target.df=data.frame(target=data[data$eval,grep(target,colnames(data))],vint.num=data[,'set-target'])
grep(target,colnames(data))
target
target='IP'
target.df=data.frame(target=data[data$eval,target],vint.num=data[,'set-target'])
target.df=data.frame(vint.num=data[,'set-target'])
View(target.df)
target.df=data[data$eval,c(target,vint.num)]
data$eval
target.df=data[data$eval,c(target,'vint.num')]
View(target.df)
View(data)
target.df=data[data$eval,c(target,'tdate')]
View(target.df)
fc=sapply(forecast.all,function(x)x$fc)
View(fc)
fc=fc[,data$eval]
fc=fc[data$eval,]
View(data)
fc=fc[1:nrow(target.df),]
View(fc)
nrow(target.df)
fc=sapply(forecast.all,function(x)x$fc)
fc=fc[1:nrow(target.df),]
dim(fc)
fc=sapply(forecast.all,function(x)x$fc)
dim(fc)
fc=fc[,1:nrow(target.df)]
dim(fc)
targetm=matrix(rep(target.df[,target],nrow(fc)),nrow(fc))
View(targetm)
targetm=matrix(rep(target.df[,target],nrow(fc)),ncol=nrow(fc))
View(targetm)
targetm=t(matrix(rep(target.df[,target],nrow(fc)),ncol=nrow(fc)))
View(targetm)
target.t=function(y.raw,horizon){
y=1200/horizon*log(y.raw/lag.exact(y.raw,horizon))
}
paste(target,'untr',sep='-')
target.untr=paste(target,'untr',sep='-')
data[data$ym%in%row.names(y.fin),target.untr]=y.fin
data[,target]=target.t(data$target,h)
auxcodedir=paste(DirCode,'/code/auxiliary code',sep='')
source(paste(auxcodedir,'/chg.R',sep=''))
data[,target]=target.t(data$target,h)
source(paste(auxcodedir,'/lag.exact.R',sep=''))
target.df=data[data$eval,c(target,'tdate')]
data[,target]=target.t(data$target,h)
data[,target]=target.t(data[,target,drop=F],h)
View(data)
source('H:/git/zeit-2/code/mti experiment main code/evaluation.R', echo=TRUE)
View(data)
data[,target]=target.t(data[,target.untr,drop=F],h)
# get vintage dates and target dates
row.n.vint=which(data$datE%in%gsub('-31','',names(sets)))
data[row.n.vint,'vint']=1
data[row.n.vint,'vint.num']=1:length(sets)
data[row.n.vint+h-plag,'set-target']=1:length(sets)
data$eval=is.na(data$'IP')==F&is.na(data$tdate)==F
target.df=data[data$eval,c(target,'tdate')]
# loading results
res.file=paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
load(res.file)
# forecasts
fc=sapply(forecast.all,function(x)x$fc)
# dropping vintages that can not be used
fc=fc[,1:nrow(target.df)]
targetm=t(matrix(rep(target.df[,target],nrow(fc)),ncol=nrow(fc)))
dim(fc)
target.df=data[data$eval,c(target,'tdate')]
View(data)
View(data)
View(data)
target.df=data[data$eval,c(target,'set-target')]
# loading results
res.file=paste('H:/git/zeit-2/Results/IP_h',h,'.RData',sep='')
load(res.file)
# forecasts
fc=sapply(forecast.all,function(x)x$fc)
# dropping vintages that can not be used
fc=fc[,1:nrow(target.df)]
targetm=t(matrix(rep(target.df[,target],nrow(fc)),ncol=nrow(fc)))
dim(fc)
load("H:/git/zeit-2/SentiWS.RData")

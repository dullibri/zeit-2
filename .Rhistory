} # en
source('H:/Gr端ner Stick Sicherung/Lexar/Explosive Wurzeln/Chow_test.R', echo=TRUE)
26.8.2014
# 1.8.2014
rm(list = ls())
Begin=proc.time()
memory.limit(size=4000)
library(R.oo)
#-------------------------------------------------------------------------------
#--- Defining the paths
NObs = 216
Rho_star = 1.02
Tau_star = 0.9
Tau0 = 0.1
Beg = 1
End = NObs
Detrend = 0
Test  =  "Chow"
CV    = 1.96   #-critical value to determine optimal lag, 1.64, 1.96, 2.58-@
Fwd   = 1      #-1 forward recursive regression, 2 backward recursive regression, 3 moving window-@
Windsize = 20 #-moving window size, applied to _fwd=3 -@
sFolder = 'H:/Gr端ner Stick Sicherung/Lexar/Explosive Wurzeln/'
sOutFolder='I:/A_Bubble/Draft/'
sInFile = paste("F:/Explosive Wurzeln/Erste_Hauptkomponenten_mtl.csv")
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
fChow = function(y_orig, Tau, Detrend)
{
T1 = length(y_orig)
TTau = floor(Tau * T1)
if(Detrend==0)
{
y = y_orig - 0#mean(y_orig)  # Demeaning original data
}
if(Detrend==1)
{
Trend = c(1:length(y_orig))
Detrend = lm(y_orig~Trend, data=DF)
Detrend_Sum = summary(Detrend)
y = Detrend_Sum$residuals
}
dy=diff(y);
vTest = rep(0, (T1-TTau))
x = y[1:(T1-1)]
OLS = lm(dy~-1+x)
#b = x\dy;
b = coef(OLS)
e=dy-x * b
var=(t(e) %*% e/(T1-2))/(t(x) %*% x);
vTest[1] = b/sqrt(var);
for(j in 2:(T1-TTau))
{
x0 = rep(0, (j-1))
x1 = y[j:(T1-1)]
x = c(x0, x1)
OLS = lm(dy~-1+x)
b = coef(OLS)
e = dy-x * b
var = (t(e) %*% e/(T1-2))/(t(x) %*% x);
vTest[j] = b/sqrt(var)
} # end of loop j
Test = max(vTest)
Index = which(vTest==Test)
#print(vTest);
Result = data.frame(Test, Index)
return(list(Test,vTest))
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#--- Loading the data
Z = read.csv(sInFile,row.names=1)
#-------------------------------------------------------------------------------
# Logarithmierung der Daten -----------------------------------------------
Z = log(Z)
#-------------------------------------------------------------------------------
#--- Conducting tests
T1 = nrow(Z)
NVar = ncol(Z)
Result = c()
svVar=colnames(Z)
mTest=matrix(NA,nrow=T1-floor(Tau0*T1),ncol=NVar)
#-------------------------------------------------------------------------------
#------ Forward recursive regression
#NVar = 1
indices=list
if(Fwd==1)
{
for(i in 1:NVar)
{
Test_i = fChow(Z[, svVar[i]], Tau0, 0)[[1]]
mTest[,i]=fChow(Z[, svVar[i]], Tau0, 0)[[2]]
Test_i$Var = svVar[i]
Result = rbind(Result, Test_i)
print(paste("Variable:", svVar[i]));
} # end of loop i
} # end of conditional statement
#-------------------------------------------------------------------------------
#--- plottin
sInFile
Berechnet die CHOW-statistic und macht die Grafiken dazu
# zuletzt verwendet am
# 26.8.2014
# 1.8.2014
rm(list = ls())
Begin=proc.time()
memory.limit(size=4000)
library(R.oo)
#-------------------------------------------------------------------------------
#--- Defining the paths
NObs = 216
Rho_star = 1.02
Tau_star = 0.9
Tau0 = 0.1
Beg = 1
End = NObs
Detrend = 0
Test  =  "Chow"
CV    = 1.96   #-critical value to determine optimal lag, 1.64, 1.96, 2.58-@
Fwd   = 1      #-1 forward recursive regression, 2 backward recursive regression, 3 moving window-@
Windsize = 20 #-moving window size, applied to _fwd=3 -@
sFolder = 'H:/Gr端ner Stick Sicherung/Lexar/Explosive Wurzeln/'
sOutFolder='I:/A_Bubble/Draft/'
sInFile = paste(sFolder,"Erste_Hauptkomponenten_mtl.csv",sep='')
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
fChow = function(y_orig, Tau, Detrend)
{
T1 = length(y_orig)
TTau = floor(Tau * T1)
if(Detrend==0)
{
y = y_orig - 0#mean(y_orig)  # Demeaning original data
}
if(Detrend==1)
{
Trend = c(1:length(y_orig))
Detrend = lm(y_orig~Trend, data=DF)
Detrend_Sum = summary(Detrend)
y = Detrend_Sum$residuals
}
dy=diff(y);
vTest = rep(0, (T1-TTau))
x = y[1:(T1-1)]
OLS = lm(dy~-1+x)
#b = x\dy;
b = coef(OLS)
e=dy-x * b
var=(t(e) %*% e/(T1-2))/(t(x) %*% x);
vTest[1] = b/sqrt(var);
for(j in 2:(T1-TTau))
{
x0 = rep(0, (j-1))
x1 = y[j:(T1-1)]
x = c(x0, x1)
OLS = lm(dy~-1+x)
b = coef(OLS)
e = dy-x * b
var = (t(e) %*% e/(T1-2))/(t(x) %*% x);
vTest[j] = b/sqrt(var)
} # end of loop j
Test = max(vTest)
Index = which(vTest==Test)
#print(vTest);
Result = data.frame(Test, Index)
return(list(Test,vTest))
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#--- Loading the data
Z = read.csv(sInFile,row.names=1)
#-------------------------------------------------------------------------------
# Logarithmierung der Daten -----------------------------------------------
Z = log(Z)
#-------------------------------------------------------------------------------
#--- Conducting tests
T1 = nrow(Z)
NVar = ncol(Z)
Result = c()
svVar=colnames(Z)
mTest=matrix(NA,nrow=T1-floor(Tau0*T1),ncol=NVar)
#-------------------------------------------------------------------------------
#------ Forward recursive regression
#NVar = 1
indices=list
if(Fwd==1)
{
for(i in 1:NVar)
{
Test_i = fChow(Z[, svVar[i]], Tau0, 0)[[1]]
mTest[,i]=fChow(Z[, svVar[i]], Tau0, 0)[[2]]
Test_i$Var = svVar[i]
Result = rbind(Result, Test_i)
print(paste("Variable:", svVar[i]));
} # end of loop i
} # end of conditional statement
#-------------------------------------------------------------------------------
#--- plotting the result
# Legt die Daten an
NObs=nrow(mTest)
x=matrix(NA,NObs,1)
st_y=2013-ceiling(NObs/12)+1
n_y=2013-st_y
st_m=(ceiling(NObs/12)-NObs/12)*12+1
mon=rep(1:12,n_y+1)[st_m:(12*(n_y+1))]
year=c(rep(st_y:2013,each=12))[st_m:(12*(n_y+1))]
t1=matrix(c(year,mon),ncol=2)
for (i in 1:NObs){x[i]=paste(t1[i,1],t1[i,2],sep=':')}
names=c('Building plot', 'Newly built apartments', 'Second-hand apartments')
par(mfrow=c(NVar,1))
for (i in 1:NVar){
plot(mTest[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=seq(3,NObs,12),labels=as.character(t1[seq(3,NObs,12),1]),las=2,hadj=1)
MAX=which.max(mTest[,i])
abline(v=MAX)
text(MAX-20,max(mTest[,i])/2,paste('Chow statistic at ',x[MAX],sep=''))
title(names[i])
#   abline(h=CV,col='red')
#   abline(v=time(aux)[Result[i,'Index']])
}
# legend(
#   1998.0
#   ,5
#   ,c('Test-Statistic','Critical value')
#   ,lty=1
#   ,col=c('black','red')
#   , bty='n'
#   ,cex=1
#)
par(mfrow=c(1,1))
NVar
View(mTest)
View(Z)
Z = read.csv(sInFile,row.names=1)
View(Z)
sInFile = paste(sFolder,"Erste_Hauptkomponenten_mtl.csv",sep='')
Z = read.csv(sInFile,row.names=1)
source('I:/Personal_Folders/employees/KX/A_Bubble/Code/Bubble_yearly_pc_Chow.R', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
View(Tstat)
names=c('Prices, building plots','Prices, newly built apartments', 'Prices, second-hand apartments',
'Rents, newly built apartments', 'Rents, second-hand apartments',
'P2R, newly built apartments', 'P2R, second-hand apartments')
Layout = rbind(c(0,1, 1,0), c(2,2,3, 3))
layout(Layout)
par(mar=c(4,4,2,1), cex.axis=1)
tck=seq(1,nrow(Tstat),1)
for (i in 1:3){
plot(Tstat[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=tck,labels=row.names(Tstat)[tck],las=2,hadj=1)
MAX=which.max(Tstat[,i])
abline(v=MAX)
text(MAX-.5,max(Tstat[,i])/2,'   Chow statistic',srt=90)
#   text(MAX-2,max(Tstat[,i])/2,paste('Chow statistic in ',row.names(Tstat)[MAX],sep=''))
title(names[i])
#   abline(h=CV,col='red')
#   abline(v=time(aux)[Result[i,'Index']])
}
par(mfrow=c(1,1))
par(mfrow=c(2,2))
tck=seq(1,nrow(Tstat),1)
for (i in 4:NVar){
plot(Tstat[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=tck,labels=row.names(Tstat)[tck],las=2,hadj=1)
MAX=which.max(Tstat[,i])
abline(v=MAX)
if (i==7){
text(MAX-1,max(Tstat[,i])/2-2,'   Chow statistic',srt=90)
}else{text(MAX-1,max(Tstat[,i])/2,'   Chow statistic',srt=90)}
#   text(MAX-2,max(Tstat[,i])/2,paste('Chow statistic in ',row.names(Tstat)[MAX],sep=''))
title(names[i])
#   abline(h=CV,col='red')
#   abline(v=time(aux)[Result[i,'Index']])
}
# legend(
#   1998.0
#   ,5
#   ,c('Test-Statistic','Critical value')
#   ,lty=1
#   ,col=c('black','red')
#   , bty='n'
#   ,cex=1
#)
par(mfrow=c(1,1))
fChow
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
View(Tstat)
View(X)
View(X)
View(Result)
svVar
NVar
NObs
svLVar
View(Result)
View(Test_i)
View(Tstat)
plot(y_orig)
# Dieses File testet die jaehrlichen Hauptkomponten newly built apartments
# und second-hand apartments der Bulwiengesa Daten auf explosive Wurzeln mithilfe des Chow-type Tests
# von Homm und Breitung
# Ausgegeben werden die Teststatistiken, der maximale Wert der Teststatistiken und ein Bild davon
# First created --- July 24, 2014
# Last modified --- November 12, 2014
#-------------------------------------------------------------------------------
rm(list = ls())
library(R.oo)
#-------------------------------------------------------------------------------
#--- Defining the paths
Tau0 = 0.1
Detrend = 0
CV    = 1.96   #-critical value to determine optimal lag, 1.64, 1.96, 2.58-@
Fwd=1
sInFolder = 'H:/Gr端ner Stick Sicherung/Lexar/Explosive Wurzeln/'
sOutFolder = "I:/Personal_Folders/employees/KX/A_Bubble/Draft/"
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
fChow = function(y_orig, Tau, Detrend)
{
T1 = length(y_orig)
TTau = floor(Tau * T1)
if(Detrend==0)
{
y = y_orig- y_orig[1] # Demeaning original data #- mean(y_orig)#
}
if(Detrend==1)
{
Trend = c(1:NObs)
Detrend = lm(y_orig~Trend, data=DF)
Detrend_Sum = summary(Detrend)
y = Detrend_Sum$residuals
}
dy=diff(y);
vTest = rep(0, (T1-TTau))
x = y[1:(T1-1)]# lag
OLS = lm(dy~-1+x)
#b = x\dy;
b = coef(OLS)
e=dy-x * b
var=(t(e) %*% e/(T1-2))/(t(x) %*% x);
vTest[1] = b/sqrt(var);
for(j in 2:(T1-TTau))
{
x0 = rep(0, (j-1))
x1 = y[j:(T1-1)]
x = c(x0, x1)
OLS = lm(dy~1+x)
b = coef(OLS)
e = dy-x * b
var = (t(e) %*% e/(T1-2))/(t(x) %*% x);
vTest[j] = b/sqrt(var)
} # end of loop j
Test = max(vTest)
Index = which(vTest==Test)
#print(vTest);
print(length(dy))
print(length(vTest))
Result = list(data.frame(Test, Index),vTest)
}
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#--- Loading the data
X = read.csv(paste(sInFolder,"Erste_Hauptkomponenten.csv",sep=''),row.names=1)
#-------------------------------------------------------------------------------
#--- Transforming data
svVar = c('building plots'
,"newly built apartments"
,'second hand apartments'
,'rents newly built apartments'
,'rents second hand apartments'
,'ratio newly built apartments'
,'ratio second hand apartments')
colnames(X)=svVar
svVar = setdiff(svVar, c("Date"))
NVar = length(svVar)
NObs = nrow(X)
svLVar = paste("L", svVar, sep="")
#-------------------------------------------------------------------------------
#--- Conducting tests
Result = c()
#-------------------------------------------------------------------------------
#------ Forward recursive regression
Tstat=matrix(NA,nrow=NObs-1,ncol=NVar)
colnames(Tstat)=colnames(X)
rownames(Tstat)=1997:2013
if(Fwd==1)
{
for(i in 1:NVar)
{
Test=fChow(X[, svVar[i]], Tau0, 0)
Tstat[,i]=Test[[2]]
Test_i = Test[[1]]
Test_i$Var = svVar[i]
Result = rbind(Result, Test_i)
print(paste("Variable:", svVar[i]));
} # end of loop i
} # end of conditional statement
#-------------------------------------------------------------------------------
#--- Saving the output
head(Result)
# write.csv(Result, paste(sFolder, sOutFile, sep=""), row.names=F)
#-------------------------------------------------------------------------------
#--- Saving the test re
source('I:/Personal_Folders/employees/KX/A_Bubble/Code/c2_Principal_Components_Explosive_root_Chow_test_Bootstrap_Simulated_InValue.r', echo=TRUE)
View(Test_results)
View(Tstat)
names=c('Prices, building plots','Prices, newly built apartments', 'Prices, second-hand apartments',
'Rents, newly built apartments', 'Rents, second-hand apartments',
'P2R, newly built apartments', 'P2R, second-hand apartments')
Layout = rbind(c(1,1, 2,2), c(3, 3,4,4))
layout(Layout)
par(mar=c(4,4,2,1), cex.axis=1)
tck=seq(1,nrow(Tstat),1)
for (i in 2:3){
plot(Tstat[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=tck,labels=row.names(Tstat)[tck],las=2,hadj=1)
if (i==1||i==2){
MAX=which.max(Tstat[,i])
abline(v=MAX)
text(MAX-.5,max(Tstat[,i])/2,'   Chow statistic',srt=90)
}
#   text(MAX-2,max(Tstat[,i])/2,paste('Chow statistic in ',row.names(Tstat)[MAX],sep=''))
title(names[i])
#   abline(h=CV,col='red')
#   abline(v=time(aux)[Result[i,'Index']])
}
for (i in 4:5){
plot(Tstat[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=tck,labels=row.names(Tstat)[tck],las=2,hadj=1)
MAX=which.max(Tstat[,i])
abline(v=MAX)
#   if (i==7){
#     text(MAX+2,-1.5,'   Chow statistic',srt=90)
if (i==6){text((MAX-1),-1.5,'   Chow statistic',srt=90)}
if (i==7){text((MAX+1),-0.8,'   Chow statistic',srt=90)}
if (i==4){text(MAX-1,max(Tstat[,i])/2+0.5,'   Chow statistic',srt=90)}
if (i==5){text(MAX-1,max(Tstat[,i])/2,'   Chow statistic',srt=90)}
#   text(MAX-2,max(Tstat[,i])/2,paste('Chow statistic in ',row.names(Tstat)[MAX],sep=''))
title(names[i])
}
par(mfrow=c(1,1))
pdf(file=paste(sOutFolder,"Fig_Chow_Test_Statistiken_im_Zeitablauf.pdf",sep=''))
names=c('Prices, building plots','Prices, newly built apartments', 'Prices, second-hand apartments',
'Rents, newly built apartments', 'Rents, second-hand apartments',
'P2R, newly built apartments', 'P2R, second-hand apartments')
Layout = rbind(c(1,1, 2,2), c(3, 3,4,4))
layout(Layout)
par(mar=c(4,4,2,1), cex.axis=1)
tck=seq(1,nrow(Tstat),1)
for (i in 2:3){
plot(Tstat[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=tck,labels=row.names(Tstat)[tck],las=2,hadj=1)
if (i==1||i==2){
MAX=which.max(Tstat[,i])
abline(v=MAX)
text(MAX-.5,max(Tstat[,i])/2,'   Chow statistic',srt=90)
}
#   text(MAX-2,max(Tstat[,i])/2,paste('Chow statistic in ',row.names(Tstat)[MAX],sep=''))
title(names[i])
#   abline(h=CV,col='red')
#   abline(v=time(aux)[Result[i,'Index']])
}
for (i in 4:5){
plot(Tstat[,i]
,xaxt='n'
,xlab=''
,ylab='Test statistic'
,type='l'
)
axis(1,at=tck,labels=row.names(Tstat)[tck],las=2,hadj=1)
MAX=which.max(Tstat[,i])
abline(v=MAX)
#   if (i==7){
#     text(MAX+2,-1.5,'   Chow statistic',srt=90)
if (i==6){text((MAX-1),-1.5,'   Chow statistic',srt=90)}
if (i==7){text((MAX+1),-0.8,'   Chow statistic',srt=90)}
if (i==4){text(MAX-1,max(Tstat[,i])/2+0.5,'   Chow statistic',srt=90)}
if (i==5){text(MAX-1,max(Tstat[,i])/2,'   Chow statistic',srt=90)}
#   text(MAX-2,max(Tstat[,i])/2,paste('Chow statistic in ',row.names(Tstat)[MAX],sep=''))
title(names[i])
}
par(mfrow=c(1,1))
dev.off()

#        ,col=c('black','red','blue'))
grid()
# dev.off()
# 30 years ----------------------------------------------------------------
ylimR=range(S_RC_T[!is.na(S_RC_T[,360]),360],
BI_RC_T[!is.na(BI_RC_T[,360]),360],
BO_RC_T[!is.na(BI_RC_T[,360]),360],
SS_RC_T[!is.na(BI_RC_T[,360]),360]
)
plot(ts(S_RC_T[!is.na(S_RC_T[,360]),360],sDate,freq=12)
,ylab='Regular contributor returns'
,main='30 years, nominal'
,ylim=ylimR
,lwd=1
)
lines(ts(BI_RC_T[!is.na(BI_RC_T[,360]),360],sDate,freq=12)
,col='red',lty=2)
lines(ts(BO_RC_T[!is.na(BO_RC_T[,360]),360],sDate,freq=12)
,col='red'
,lty=3
)
lines(ts(SS_RC_T[!is.na(SS_RC_T[,360]),360],sDate,freq=12)
,col='blue'
,lty=4)
# legend('bottomright'
#        ,c('S&P500','Bills', 'SmallCap ')
#        ,lty=c(1,1,1)
#        ,col=c('black','red','blue'))
grid()
ylimR=range(S_RC_TR[!is.na(S_RC_TR[,360]),360],
BI_RC_TR[!is.na(BI_RC_TR[,360]),360],
BO_RC_TR[!is.na(BI_RC_TR[,360]),360],
SS_RC_TR[!is.na(BI_RC_TR[,360]),360]
)
plot(ts(S_RC_TR[!is.na(S_RC_T[,360]),360],sDate,freq=12)
,ylab='Regular contributor returns'
,main='30 years, real'
,ylim=ylimR
,lwd=1
)
lines(ts(BI_RC_TR[!is.na(BI_RC_T[,360]),360],sDate,freq=12)
,col='red',lty=2)
lines(ts(BO_RC_TR[!is.na(BO_RC_T[,360]),360],sDate,freq=12)
,col='red'
,lty=3
)
lines(ts(SS_RC_TR[!is.na(SS_RC_T[,360]),360],sDate,freq=12)
,col='blue'
,lty=4)
# legend('topright'
#        ,c('S&P500','Bills', 'SmallCap ')
#        ,lty=c(1,1,1)
#        ,col=c('black','red','blue'))
grid()
# 40 years ----------------------------------------------------------------
ylimR=range(S_RC_T[!is.na(S_RC_T[,480]),480],
BI_RC_T[!is.na(BI_RC_T[,480]),480],
BO_RC_T[!is.na(BI_RC_T[,480]),480],
SS_RC_T[!is.na(BI_RC_T[,480]),480]
)
plot(ts(S_RC_T[!is.na(S_RC_T[,480]),480],sDate,freq=12)
,ylab='Regular contributor returns'
,main='40 years, nominal'
,ylim=ylimR
,lwd=1
)
lines(ts(BI_RC_T[!is.na(BI_RC_T[,480]),480],sDate,freq=12)
,col='red',lty=2)
lines(ts(BO_RC_T[!is.na(BO_RC_T[,480]),480],sDate,freq=12)
,col='red'
,lty=3
)
lines(ts(SS_RC_T[!is.na(SS_RC_T[,480]),480],sDate,freq=12)
,col='blue',lty=4)
# legend('bottomright'
#        ,c('S&P500','Bills', 'SmallCap ')
#        ,lty=c(1,1,1)
#        ,col=c('black','red','blue'))
grid()
ylimR=range(S_RC_TR[!is.na(S_RC_TR[,480]),480],
BI_RC_TR[!is.na(BI_RC_TR[,480]),480],
BO_RC_TR[!is.na(BI_RC_TR[,480]),480],
SS_RC_TR[!is.na(BI_RC_TR[,480]),480]
)
plot(ts(S_RC_TR[!is.na(S_RC_T[,480]),480],sDate,freq=12)
,ylab='Regular contributor returns'
,main='40 years, real'
,ylim=ylimR
,lwd=1
)
lines(ts(BI_RC_TR[!is.na(BI_RC_T[,480]),480],sDate,freq=12)
,col='red',lty=2)
lines(ts(BO_RC_TR[!is.na(BO_RC_T[,480]),480],sDate,freq=12)
,col='red'
,lty=3
)
lines(ts(SS_RC_TR[!is.na(SS_RC_T[,480]),480],sDate,freq=12)
,col='blue',lty=4)
# legend('topright'
#        ,c('S&P500','Bills', 'SmallCap ')
#        ,lty=c(1,1,1)
#        ,col=c('black','red','blue'))
grid()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("F:/Malli Kommentar/05_03_2014_SHORT_malli_RC_LS_SBBI_pi005.R.RData")
test=BO_RC_TR[!is.na(BO_RC_T[,480])>S_RC_TR[!is.na(BO_RC_T[,480])
test=BO_RC_TR[!is.na(BO_RC_T[,480])]>S_RC_TR[!is.na(S_RC_T[,480])]
test=BO_RC_TR[!is.na(BO_RC_T[,480])]>S_RC_TR[!is.na(S_RC_T[,480])]
ttest
test
sum(test[!is.na(test)])
test=BO_RC_TR[,!is.na(BO_RC_T[,480])]>S_RC_TR[,!is.na(S_RC_T[,480])]
test=BO_RC_TR[!is.na(BO_RC_T[,480]),480]>S_RC_TR[!is.na(S_RC_T[,480]),480]
test
BO_S=sum(test)/length/test
BO_S=sum(test)/length(test)
BO_S
anti=matrix(NA,3,3)
row.names(anti)=c('S_SS','BO_S','BI_BO')
colnames(anti)=c(240,360,480)
anti(2,3)=sum(test)/length(test)
anti=matrix(NA,3,3)
row.names(anti)=c('S_SS','BO_S','BI_BO')
colnames(anti)=c(240,360,480)
test=BO_RC_TR[!is.na(BO_RC_T[,480]),480]>S_RC_TR[!is.na(S_RC_T[,480]),480]
anti(2,3)=sum(test)/length(test)
rstudio::viewData(anti)
sum(test)/length(test)
anti[2,3]=sum(test)/length(test)
test=S_RC_TR[!is.na(S_RC_T[,480]),480]>SS_RC_TR[!is.na(SS_RC_T[,480]),480]
anti[1,3]=sum(test)/length(test)
test=BI_RC_TR[!is.na(BI_RC_T[,480]),480]>BO_RC_TR[!is.na(BO_RC_T[,480]),480]
anti[3,3]=sum(test)/length(test)
anti
source('F:/Malli Kommentar/percentage outperformance.R', echo=TRUE)
anti
anti=round(anti*100,1)
anti=round(anti*100,1)
anti
source('~/.active-rstudio-document', echo=TRUE)
anti
rm(anti)
source('~/.active-rstudio-document', echo=TRUE)
anit
anti
source('~/.active-rstudio-document', echo=TRUE)
anti
rm(anti)
source('~/.active-rstudio-document', echo=TRUE)
anti
version
install.packages("astsa")
library("astsa", lib.loc="C:/Users/Dirk/Documents/R/win-library/3.0")
data(birth)
plot(birth)
lag2.plot(birth)
install.packages("tm")
library("tm", lib.loc="C:/Users/Dirk/Documents/R/win-library/3.0")
stopwords("german")
install.packages("qdap")
library("qdap", lib.loc="C:/Users/Dirk/Documents/R/win-library/3.0")
txt <- system.file("texts", "txt", package = "tm")
(ovid <- Corpus(DirSource(txt, encoding = "UTF-8"),
readerControl = list(language = "lat")))
txt
ovid
fix(ovid)
inspect(ovid)
scores.word_stats(ovid)
scores.word(ovid)
freq.terms(ovid)
require(qdap)
findFreqTerms(ovid)
reuters <- tm_map(reuters, stripWhitespace)
reuters <- tm_map(reuters, as.PlainTextDocument)
reut21578 <- system.file("texts", "crude", package = "tm")
reuters <- Corpus(DirSource(reut21578),
readerControl = list(reader = readReut21578XML))
reuters <- tm_map(reuters, as.PlainTextDocument)
findFreqTerms(reuters)
source('F:/Hertie School of Governance/Vorlesung/Hertie/homework time series 2.R', echo=TRUE)
rstudio::viewData(df)
library(forecast)
library(stats)
# getting the data --------------------------------------------------------
sFolder='f:/Hertie School of Governance/Vorlesung/Hertie'
sFile="/unemployment.csv"
# loading necessary packages ----------------------------------------------
install.packages('dyn')
install.packages('vars')
install.packages('outliers')
install.packages('forecast')
install.packages('tseries')
install.packages('lmtest')
library('dyn')
library('vars')
library('outliers')
library('forecast')
library('tseries')
library('lmtest')
install.packages("forecast")
install.packages("tseries")
install.packages("tseries")
sFolder='d:/Hertie School of Governance/Vorlesung/Hertie'
sFile="/income and consumption.csv"
df=read.csv(paste(sFolder,sFile,sep='')
, sep=";"
, dec="."
,row.names=1
)
sFolder='f:/Hertie School of Governance/Vorlesung/Hertie'
sFile="/income and consumption.csv"
df=read.csv(paste(sFolder,sFile,sep='')
, sep=";"
, dec="."
,row.names=1
)
rstudio::viewData(df)
rstudio::viewData(df)
df
rstudio::viewData(df)
library("rstudio", lib.loc="C:/Program Files/RStudio/R/library")
plot(df)
VAR(df,lag.max=3,ic='SC')
test=VAR(df,lag.max=3,ic='SC')
test
str(test)
test$varresult
coefficients(test)
coef(test)
coef(test)[,1]
apply(coef(test),1,function{x[,4]})
apply(coef(test),1,function(x)x[,4])
apply(coef(test),2,function(x)x[,4])
t1=coef(test)
t1=unlist(coef(test))
fix(`t1`)
sapply(coef(test),unlist)
apply(coef(test),2,function(x)x[,4])
lapply(coef(test),function(x)x[,4])
unlist(lapply(coef(test),function(x)x[,4]))
t1=unlist(lapply(coef(test),function(x)x[,4]))
t1
t1=matrix(unlist(lapply(coef(test),function(x)x[,4])),nrow=2)
rstudio::viewData(`t1`)
library()
rstudio::viewData(df)
rstudio::viewData(df)
rstudio::viewData(df)
rstudio::viewData(df)
rstudio::viewData(df)
rstudio::viewData(`t1`)
head(t1)
tetst
test
t1
test
t1=matrix(unlist(lapply(coef(test),function(x)x[,1])),nrow=2)
t1
coef(test)
coef(test)[1]
coef(test)[1][,1]
coef(test)[[1]][,1]
t2=coef(test)
lapply(coef(test),function(x)[,1])
lapply(coef(test),function(x)x[,1])
sapply(coef(test),function(x)x[,1])
t3=sapply(coef(test),function(x)x[,1])
test
t(t3)
t3=t(sapply(coef(test),function(x)x[,1]))
rstudio::viewData(`t3`)
t3
head(df1)
tail(df)
tail(df,2)
t(tail(df,2))
t4=t(tail(df,2))
rev(t4)
t5=apply(t4,2,rev)
t5
t6=apply(tail(df,2),2,rev)
t6
t6=t(apply(tail(df,2),2,rev))
t6
t3
matrix(t6,ncol=1)
t3[,2:ncol(t3)]*matrix(t6,ncol=1)
t3[,2:ncol(t3)]/*/matrix(t6,ncol=1)
t3[,2:ncol(t3)]%*%matrix(t6,ncol=1)
diag(2)
diag(4)
diag(2)
source('F:/Log vs level/logvslevel.R', echo=TRUE)
predict(test)
?predict
predict(test,2)
predict(test,n.ahead=2)
?predict
11509.35+57.66274
predict(test,n.ahead=2,ci=1)
predict(test,n.ahead=2,ci=0)
tt=predict(test,n.ahead=2,ci=0)
str(tt)
tt=predict(test,n.ahead=2,ci=0)
tt
tt=predict(test,n.ahead=20,ci=0.95)
tt
tt[,1]
tt$con[,1]
tt$con
tt[1]
tt[2]
tt[3]
tt[4]
tt[4]$fcst
tt$fcst
tt$fcst$con
library(HSAUR)
install.packages("HSAUR")
library(HSAUR)
library(HSAUR)
data("heptathlon", package = "HSAUR")
heptathlon$hurdles <- max(heptathlon$hurdles) - heptathlon$hurdles
heptathlon$run200m <- max(heptathlon$run200m) - heptathlon$run200m
heptathlon$run800m <- max(heptathlon$run800m) - heptathlon$run800m
round(cor(heptathlon), 2)
plot(heptathlon)
heptathlon_pca <- prcomp(heptathlon, scale = TRUE)
print(heptathlon_pca)
colSums((heptathlon_pca[2]$rotation))
summary(heptathlon_pca)
center <- heptathlon_pca$center
scale <- heptathlon_pca$scale
hm <- as.matrix(heptathlon)
install.packages("phtt")
library(phtt)
data(cigar)
data(Cigar)
rstudio::viewData(Cigar)
head(Cigar)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
dat[1:rec,]
rec
View(dat)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
save.image("F:/Log vs level/US_Ergebnisse.RData")
lrec
View(dat)
?Corpus
library("tm", lib.loc="~/R/win-library/3.0")
?Corpus
thepage = readLines(http://www.faz.net/')
thepage = readLines(http://www.faz.net')
thepage = readLines('http://www.faz.net')
thepage
thepage = readHTML('http://www.faz.net')
thepage = Corpus('http://www.faz.net',readerControl=list(language='German'))
source('~/.active-rstudio-document', echo=TRUE)
pagetree
x<- xpathSApply(pagetree, "//*/table", xmlValue)
x
head(x)
source('~/.active-rstudio-document', echo=TRUE)
head(x)
thepage = Corpus('http://www.faz.net',readerControl=list(reader=readHTML,language='German'))
library("tm", lib.loc="~/R/win-library/3.0")
thepage = Corpus('http://www.faz.net',readerControl=list(reader=readHTML,language='German'))
source('~/.active-rstudio-document', echo=TRUE)
Publikationen <- Corpus(x=http://www.faz.net',
readerControl = list(reader = readHTML,
language="de"))
Publikationen <- Corpus(x='http://www.faz.net',readerControl = list(reader = readHTML,language="de"))
Dir<-DirSource(directory="http://www.faz.net",recursive = TRUE)
?DirSource
wx='http://www.faz.net'
x=readLines(wx)
Publikationen <- Corpus(x,readerControl = list(reader = readHTML,language="de"))
getSources
Publikationen <- Corpus(VectorSource=x,readerControl = list(reader = readHTML,language="de"))
xs=VectorSource(x)
Publikationen <- Corpus(xs,readerControl = list(reader = readHTML,language="de"))
xs
?readLines
?Corpus
getReaders
Publikationen <- Corpus(xs,readerControl = list(reader = readXML,language="de"))
?Corpus
Publikationen <- Corpus(xs,readerControl = list(reader = readPlain,language="de"))
readHTML<-function(elem, language, id){
content <- system2("html2text", shQuote(elem$uri), stdout = TRUE)
PlainTextDocument(content, id = id, language = language,
origin=sub("/.*", "", sub(".*Publikationen/*", "", elem$uri)))
}
Publikationen <- Corpus(xs,readerControl = list(reader = readHTML,language="de"))
install.packages("tm.plugin.webmining")
library("tm.plugin.webmining", lib.loc="~/R/win-library/3.0")
x=extractContentDOM(wx)
x=extractHTMLStrip(wx)
?extractHTMLStrip
x=readLines(wx)
x=extractHTMLStrip(x)
library(tm.plugin.webmining)
wx='http://www.zeit.de/2014/01/tuerkei-erdogan-korruption'
x=readLines(wx)
library(tm.plugin.webmining)
version()
info()
sessionInfo()
swirl()
library('swirl')
swirl()
sapply(flags,unique)
vapply(flags,uniqe,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
flags$red
View(flags)
tapply(flags$population,flags$landmass,summary)
library(tm.plugin.webmining)
table(flags)
table(flags$Population)
table(flags$population)
library(tm.plugin.webmining)
x=extractHTMLStrip(x)
?extractHTMLStrip
x=extractHTMLStrip(wx)
x=readLines(wx)
head(x)
x=extractHTMLStrip(x)
x
?readLines
x=readLines(wx,encoding=UTF-8)
x=readLines(wx,encoding='UTF-8')
x
x=extractHTMLStrip(x)
xs=VectorSource(x)
library(tm)
xs=VectorSource(x)
Publikationen <- Corpus(xs,readerControl = list(reader = readHTML,language="de"))
Publikationen <- Corpus(xs,readerControl = list(reader = readPlain,language="de"))
inspect(Publikationen)
w = getURL("http://www.omegahat.org/RCurl/index.html")
w
htmlTreeParse(w)
library("XML", lib.loc="~/R/win-library/3.0")
htmlTreeParse(w)
?htmlTreeParse
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
search(htmlToText)
??htmlToText
source('~/.active-rstudio-document', echo=TRUE)
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8', echo=TRUE)
x<-Corpus(txt,readerControl = list(reader = readPlain,language="de"))
library(tm)
x<-Corpus(txt,readerControl = list(reader = readPlain,language="de"))
txt <- htmlToText(input)
txt
input
x=readLines(wx,encoding='UTF-8')
wx='http://www.zeit.de/2014/01/tuerkei-erdogan-korruption'
x=readLines(wx,encoding='UTF-8')
x=extractHTMLStrip(x)
library(tm.plugin.webmining)
x=extractHTMLStrip(x)
x
txt <- htmlToText(input)
x=readLines(wx,encoding='UTF-8')
x
source('C:/Users/Dirk/zeit/Getting_texts.R', echo=TRUE)
source('C:/Users/Dirk/zeit/Getting_texts.R', echo=TRUE)
source('C:/Users/Dirk/zeit/Getting_texts.R', echo=TRUE)

YILS0[,a]=YILS[cbind(v0[,aux[a]],aux[a])]
DCAI0[,a]=DCAI[cbind(v0[,aux[a]],aux[a])]
DCALS0[,a]=DCALS[cbind(v0[,aux[a]],aux[a])]
RCY0[,a]=RCY[cbind(v0[,aux[a]],aux[a])]
YI0[,a]=YI[cbind(v0[,aux[a]],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,aux[a]],aux[a])# id der expansion ergebnisse bestimmter länge
}
RCY0
save.image("F:/Cost Averaging/1908.RData")
v0[,aux[a]]
apply(RCY,2,mean)/apply(RCY,2,sd)
apply(RCY,1,mean)/apply(RCY,1,sd)
g0=g[g[,4]==0,]
g00<-matrix(g0[,c(1,3)],nrow(g0),2)
g00[,2]=g00[,2]-sp+1# anpassen, da in der 1. spalte die werte der kürzesten anlageperiod sp stehen.
# CONTRACTION
g1=g[g[,4]==1,]
g11=matrix(g1[,c(1,3)],nrow(g1),2)
g11[,2]=g11[,2]-sp+1
if(g[1,4]==0){
g00[1,1]<-2 # die erste beobachtung beginnt immer erst bei 2
g00[1,2]<-g00[1,2]-1 # da die erste beobachtung immer erst bei 2 beginnt, ist die anlage auch 1 monat kürzer
}else{
g11[1,1]<-2 # die erste beobachtung beginnt immer erst bei 2
g11[1,2]<-g11[1,2]-1}
#INTERVALLE VOR UND NACH peak/trough
#peak
s<-12
#SONDERLOCKE: 14. turning point ist das datenende...daher hier 1:13
v0<-baa(g0[1:13,2],s)# indexmatrix der intervalle vor einer expansion
YILS0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCAI0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCALS0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
RCY0<-matrix(NA,nrow(v0),s*2)
YI0<-matrix(NA,nrow(v0),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
v0ind<-matrix(NA,nrow(v0)*s*2,2)#untereinander gestapelte indexwerte der v0
aux<-c(s:1,1:s)
for (a in 1:(s*2)){
YILS0[,a]=YILS[cbind(v0[,aux[a]],aux[a])]
DCAI0[,a]=DCAI[cbind(v0[,aux[a]],aux[a])]
DCALS0[,a]=DCALS[cbind(v0[,aux[a]],aux[a])]
RCY0[,a]=RCY[cbind(v0[,aux[a]],aux[a])]
YI0[,a]=YI[cbind(v0[,aux[a]],aux[a])]
v0ind[(nrow(v0)*(a-1)+1):(nrow(v0)*a),]=cbind(v0[,aux[a]],aux[a])# id der expansion ergebnisse bestimmter länge
}
View(RCY0)
apply(RCY0,2,mean)
apply(RCY0,2,mean)/apply(RCY0,2,sd)
RCY1<-matrix(NA,nrow(v1),s*2)
s<-12
#SONDERLOCKE: 14. turning point ist das datenende...daher hier 1:13
v1<-baa(g1[1:13,2],s)# indexmatrix der intervalle vor einer expansion
YILS1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCAI1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v0phasen x intervallänge)
DCALS1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v1phasen x intervallänge)
RCY1<-matrix(NA,nrow(v1),s*2)
YI1<-matrix(NA,nrow(v1),s*2) # ergebnismatrix: Y (v1phasen x intervallänge)
v1ind<-matrix(NA,nrow(v1)*s*2,2)#untereinander gestapelte indexwerte der v1
aux<-c(s:1,1:s)
for (a in 1:(s*2)){
YILS1[,a]=YILS[cbind(v1[,aux[a]],aux[a])]
DCAI1[,a]=DCAI[cbind(v1[,aux[a]],aux[a])]
DCALS1[,a]=DCALS[cbind(v1[,aux[a]],aux[a])]
RCY1[,a]=RCY[cbind(v1[,aux[a]],aux[a])]
YI1[,a]=YI[cbind(v1[,aux[a]],aux[a])]
v1ind[(nrow(v1)*(a-1)+1):(nrow(v1)*a),]=cbind(v1[,aux[a]],aux[a])# id der expansion ergebnisse bestimmter länge
}
apply(RCY1,2,mean)/apply(RCY1,2,sd)
tt<-apply(RCY1,2,mean)/apply(RCY1,2,sd)
fix(tt)
apply(RCY0,2,mean)/apply(RCY0,2,sd)
View(INT)
plot(int)
tbill<-ts(int,start=c(1934,1),freq=12)
plot(tbill)
load("I:/Praktikanten/Nauhaus/05 Spline Methode/R/splinerohdaten.csv")
dataQ = read.table("splinerohdaten.csv", header = TRUE, sep = ",", dec = ".")
setwd("I:/Praktikanten/Nauhaus/Spline Methode")
dataQ = read.table("splinerohdaten.csv", header = TRUE, sep = ",", dec = ".")
setwd("I:/Praktikanten/Nauhaus/Spline Methode/R")
library("fpp", lib.loc="C:/Users/dulbricht/Documents/R/R-3.0.0/library")
load("F:/Hertie School of Governance/Vorlesung/cons.xlsx")
cons <- read.table("F:/Hertie School of Governance/Vorlesung/cons.csv", header=T, quote="\"")
View(cons)
?adf
adf.test(cons)
c=matrix(x,218,1)
c=matrix(cons,218,1)
adf.test(c)
?adf.test
co=c(cons)
cons=ts(cons,s=c(1959,1),f=4)
plot(cons)
adf.test(cons)
adf.test(d(cons)
)
adf.test(dif(cons)
)
adf.test(diff(cons))
?diff
cons <- read.csv("F:/Hertie School of Governance/Vorlesung/cons.csv")
View(cons)
cons<-ts(cons,s=c(1959,1),f=4)
plot(cons)
adf.test(cons)
str(cons)
fix(cons)
adf.test(cons$con)
adf.test(cons$cons)
adf.test(cons[,1])
test=cons
test=cbind(test,ln(test))
test=cbind(test,log(test))
cons=cbind(cons,log(cons))
plot(cons[,c(3,4)])
plot(cons[,1])
plot(cons[name=cons])
plot(cons[,name=cons])
plot(cons)
View(cons)
names(cons)
?mts
?ts
str(cons)
cons<-ts(cons,s=c(1959,1),f=4)
plot(cons)
fix(cons)
cons<-ts(cons,s=c(1959,1),f=4)
str(cons)
cons<-ts(cons,s=c(1959,1),f=4,names=c('cons','inc','ln(cons)','ln(inc)'))
plot(cons)
adf.test(cons[,3])
adf.test(cons[,3])
adf.test(cons[,4])
cons=cbind(cons, diff(cons))
cons<-ts(cons,s=c(1959,1),f=4,names=c('cons','inc','ln(cons)','ln(inc)','dif(cons)','dif(inc)','dif(ln(cons))','dif(ln(inc))'))
plot(cons)
save.image("F:/Hertie School of Governance/Vorlesung/cons.RData")
data <- read.csv("F:/Hertie School of Governance/Vorlesung/cons.csv")
data <- read.csv("F:/Hertie School of Governance/Vorlesung/cons.csv")
fit.ex3 <- lm(cons ~ inc, data=cons)
summary(fit.ex3)
res3 <- ts(resid(fit.ex3),s=1959.1,f=4)
plot(res3)
Acf(res3)
?Acf
Pacf(res3)
save.image("F:/Hertie School of Governance/Vorlesung/cons.RData")
plot(cons)
plot(cons,data=cons)
save.image("F:/Hertie School of Governance/Vorlesung/cons.RData")
letters(1:6)
letters[1:3]
LETTERS[1:3]
month.ab[1:6]
month.abb[1:6]
month.name[1:6]
cummin (c(3:1 , 2:0 , 4:2) )
(c(3:1 , 2:0 , 4:2) )
myframe[,1]
View(Test_complete)
write.csv(Test_complete,'h:/git/zeit-2/annotationen_JMincomp.csv')
View(JM)
write.csv(Test_complete,'h:/git/zeit-2/annotation/JM.csv')
write.csv(JM,'h:/git/zeit-2/annotation/JM.csv')
write.csv(DC,'h:/git/zeit-2/annotation/DC.csv')
write.csv(SN,'h:/git/zeit-2/annotation/SN.csv')
DirCode='C:/Users/Dirk/Documents/GitHub/zeit-2'
DirGold=paste(DirCode,'/data/goldstandard/',sep='')
files=list.files(DirGold)
# library('irr')
# load the evaluations of the 3 annotators (dmitry, steffen and jakob, paragraph 13 'strom aus der welle' deleted, due to error in counting paragraphs, article 'Die Hintermänner' actually had 56 not 55 paragraphs, the  number given in the annotation form, article 'Willkommen in Deutschland' has not been evaluated by either of the annotators.)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
# rearanging columns for convenience
text.col=grep('Text',colnames(df))
df=cbind(df[,-4],df[,4,drop=F])
compl=complete.cases(df)
# dropping incomplete observations
df=df[compl,]
# getting automated sentiment
# load valueword (a vector of SentiWS words in the first column, values in the second, ambigous duplicates are eliminated, capitalizations are preserved)
valueword=read.csv(paste(DirCode,'/valueword.csv',sep=''))
# ignoring small positive and negative value-words
# big.ind=(valueword$wert)<0
# valueword=valueword[big.ind,]
# creating function to evaluate texts:
sentiment<-function (text, valueword){
# returns the word, value, stem,
# form and frequency of each sentiment word in text
# in the data.frame valdf. And, it returns the total
# number of words in text
# as integer nword.
if (length(text) == 2 & text[1] == ",x") {
text = text[2]
}
text.split = sapply(strsplit(text, " "), function(x) x)
ind = valueword[, 1] %in% text.split
valdf = valueword[ind, , drop = F]
valdf$h = sapply(valueword[ind, 1], function(x) sum(text.split%in%x))
nwords = length(text.split)
return(list(valdf,nwords))
}
# auto: getting values, the number of observations each paragraph and the
# values relative to the number of words
auto.sent=sapply(as.character(df[,'Text']),sentiment,valueword)
colnames(auto.sent)=NULL
auto=data.frame(auto.values=sapply(auto.sent[1,],function(x) sum(x$wert))
,nwords=sapply(auto.sent[2,],function(x) x))
auto$auto.rvalues=auto$auto.values/auto$nwords
df=cbind(auto,df)
DirCode='C:/Users/Dirk/Documents/GitHub/zeit-2'
DirGold=paste(DirCode,'/data/goldstandard/',sep='')
files=list.files(DirGold)
# library('irr')
# load the evaluations of the 3 annotators (dmitry, steffen and jakob, paragraph 13 'strom aus der welle' deleted, due to error in counting paragraphs, article 'Die Hintermänner' actually had 56 not 55 paragraphs, the  number given in the annotation form, article 'Willkommen in Deutschland' has not been evaluated by either of the annotators.)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
DirCode='C:/Users/Dirk/Documents/GitHub/zeit-2'
DirCode='h://Git/zeit-2'
DirGold=paste(DirCode,'/data/goldstandard/',sep='')
files=list.files(DirGold)
# library('irr')
# load the evaluations of the 3 annotators (dmitry, steffen and jakob, paragraph 13 'strom aus der welle' deleted, due to error in counting paragraphs, article 'Die Hintermänner' actually had 56 not 55 paragraphs, the  number given in the annotation form, article 'Willkommen in Deutschland' has not been evaluated by either of the annotators.)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
# rearanging columns for convenience
text.col=grep('Text',colnames(df))
df=cbind(df[,-4],df[,4,drop=F])
compl=complete.cases(df)
# dropping incomplete observations
df=df[compl,]
# getting automated sentiment
# load valueword (a vector of SentiWS words in the first column, values in the second, ambigous duplicates are eliminated, capitalizations are preserved)
valueword=read.csv(paste(DirCode,'/valueword.csv',sep=''))
# ignoring small positive and negative value-words
# big.ind=(valueword$wert)<0
# valueword=valueword[big.ind,]
# creating function to evaluate texts:
sentiment<-function (text, valueword){
# returns the word, value, stem,
# form and frequency of each sentiment word in text
# in the data.frame valdf. And, it returns the total
# number of words in text
# as integer nword.
if (length(text) == 2 & text[1] == ",x") {
text = text[2]
}
text.split = sapply(strsplit(text, " "), function(x) x)
ind = valueword[, 1] %in% text.split
valdf = valueword[ind, , drop = F]
valdf$h = sapply(valueword[ind, 1], function(x) sum(text.split%in%x))
nwords = length(text.split)
return(list(valdf,nwords))
}
# auto: getting values, the number of observations each paragraph and the
# values relative to the number of words
auto.sent=sapply(as.character(df[,'Text']),sentiment,valueword)
colnames(auto.sent)=NULL
auto=data.frame(auto.values=sapply(auto.sent[1,],function(x) sum(x$wert))
,nwords=sapply(auto.sent[2,],function(x) x))
auto$auto.rvalues=auto$auto.values/auto$nwords
df=cbind(auto,df)
View(auto.sent)
View(auto.sent)
View(auto)
auto.sent[[1]]
auto.sent[[2]]
auto.sent[[3]]
auto.sent[[5]]
auto.sent[[7]]
auto.sent[[9]]
View(auto)
test=aut.sent[1]
test=auto.sent[1]
test
test=auto.sent[2]
test
View(df)
text.t=df[1,'Text']
text.t=as.character(df[1,'Text'])
test=sentiment(text.t,valueword)
test
x=test
valdf=x[[1]]
valdf
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=data.frame(
npword=sum(pos.ind)
nnword=sum(neg.ind)
nword=x[[2]]
pvalue=sum(valdf$wert[pos.ind])
nvalue=sum(valdf$wert[neg.ind])
)
}
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=data.frame(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
)
}
sentproc(x)
t=sentproc(x)
t
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=data.frame(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
t=sentproc(x)
t
auto.sent=lapply(as.character(df[,'Text']),sentiment,valueword)
auto.sent[2]
sentproc(aut.sent[1])
sentproc(auto.sent[1])
sentproc(auto.sent[[1]])
t=sentproc(auto.sent[[1]])
t
t=sentproc(auto.sent[[10]])
t
result=sapply(auto.sent,sentproc)
View(result)
result=data.frame(t(sapply(auto.sent,sentproc)))
View(result)
str(result)
result=data.frame(t(sapply(auto.sent,function(x) sentproc(x))))
str(result)
View(result)
result=t(sapply(auto.sent,function(x) sentproc(x)))
test=as.numeric(result)
test=as.numeric(data.frame(result))
result=t(sapply(auto.sent,function(x) sentproc(x)))
test=sapply(result,function(x) x)
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=matrix(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
result=t(sapply(auto.sent,function(x) sentproc(x)))
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a data.frame comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=c(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
result=t(sapply(auto.sent,function(x) sentproc(x)))
View(result)
View(df)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
View(df)
grep('SN|JM|DC',colnames(df))
df[,-grep('SN|JM|DC',colnames(df))]
df=df[,-grep('SN|JM|DC',colnames(df))]
View(df)
load("H:/git/zeit-2/annotationen_JMincomp.csv")
load("H:/git/zeit-2/annotationen_JMincomp.csv")
DC <- read.csv("H:/git/zeit-2/Data/goldstandard/DC.csv")
View(DC)
colnames(DC)
DC=DC[,c('Artikeln.Nr','Bewertung','Zeitbezug','Thematische.Bewertung']
DC=DC[,c('Artikeln.Nr','Bewertung','Zeitbezug','Thematische.Bewertung')]
DC=DC[,c('Artikeln.Nr.','Bewertung','Zeitbezug','Thematische.Bewertung')]
JM <- read.csv("H:/git/zeit-2/Data/goldstandard/JM.csv")
JM=JM[,c('Artikeln.Nr.','Bewertung','Zeitbezug','Thematische.Bewertung')]
SN <- read.csv("H:/git/zeit-2/Data/goldstandard/SN.csv")
colnames(JM)=c('Nr','DC','DC.Zeitbezug','DC.Thema')
colnames(Dc)=c('Nr','DC','DC.Zeitbezug','DC.Thema')
colnames(DC)=c('Nr','DC','DC.Zeitbezug','DC.Thema')
colnames(JM)=c('Nr','JM','JM.Zeitbezug','JM.Thema')
colnames(SN)=c('Nr','SN','SN.Zeitbezug','SN.Thema')
df.t=cbind(SN,JM[,-1],DC[,-1],df)
View(df.t)
View(SN)
SN <- read.csv("H:/git/zeit-2/Data/goldstandard/SN.csv")
View(SN)
SN=SN[,c('Artikeln.Nr.','Bewertung','Zeitbezug','Thematische.Bewertung')]
colnames(SN)=c('Nr','SN','SN.Zeitbezug','SN.Thema')
View(SN)
df=read.csv(paste(DirGold,'Zeit_Artikel_Abschnitte_Bewertung_3_HAnnotatoren.csv',sep=''),sep=';')
df=df[,-grep('SN|JM|DC',colnames(df))]
df.t=cbind(SN,JM[,-1],DC[,-1],df)
View(df.t)
df=df[,-1]
View(df)
View(df.t)
df.t=df.t[,-1]
View(df.t)
grep('SN|JM|DC',colnames(df.t))
grep('SN$|JM|DC',colnames(df.t))
grep('SN$|JM$|DC$',colnames(df.t))
colnames(df.t)[c(1,4,7)]
grep('Artikeln.Nr.|SN$|JM$|DC$',colnames(df.t))
grep('Artikeln_Nr|SN$|JM$|DC$',colnames(df.t))
grep('Artikeln_Nr|Abschnitt|SN$|JM$|DC$',colnames(df.t))
erst=grep('Artikeln_Nr|Abschnitt|SN$|JM$|DC$',colnames(df.t))
df.t=cbind(df.t[,erst],df.t[,-erst])
View(df.t)
getwd()
setwd(DirCode)
getwd()
dput(df.t,'Annotatoren.RData')
write.csv(df.t,'Annotatoren.csv',sep=';')
df=read.csv(paste(DirGold,'Annotatoren.csv',sep=''),sep=';')
View(df)
df=read.csv(paste(DirGold,'Annotatoren.csv',sep=''))
View(df)
df=cbind(t(sapply(auto.sent,function(x) sentproc(x))),df)
sentiment<-function (text, valueword){
# returns the word, value, stem,
# form and frequency of each sentiment word in text
# in the data.frame valdf. And, it returns the total
# number of words in text
# as integer nword.
if (length(text) == 2 & text[1] == ",x") {
text = text[2]
}
text.split = sapply(strsplit(text, " "), function(x) x)
ind = valueword[, 1] %in% text.split
valdf = valueword[ind, , drop = F]
valdf$h = sapply(valueword[ind, 1], function(x) sum(text.split%in%x))
nwords = length(text.split)
return(list(valdf,nwords))
}
auto.sent=lapply(as.character(df[,'Text']),sentiment,valueword)
# function to process the data
sentproc<-function(x){
# processes the information returned by stentiment.R and returns
# a vector comprising number of positive words (npword)
# number of negative words (nnword), total number of words (nword)
# sum of positive values (pvalue), and sum of negative values (nvalue)
valdf=x[[1]]
pos.ind=valdf$wert>0
neg.ind=valdf$wert<0
result=c(
npword=sum(pos.ind)
,nnword=sum(neg.ind)
,nword=x[[2]]
,pvalue=sum(valdf$wert[pos.ind])
,nvalue=sum(valdf$wert[neg.ind])
,value=sum(valdf$wert)
)
}
df=cbind(t(sapply(auto.sent,function(x) sentproc(x))),df)
View(df)
df$X=NULL
df.art=data.frame(nword=aggregate(df$nwords,list(df$Artikeln_Nr),sum))
df.art$JM=aggregate(df$nwords*df$JM,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$SN=aggregate(df$nwords*df$SN,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$DC=aggregate(df$nwords*df$DC,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$auto.rvalues=aggregate(df$value,list(df$Artikeln_Nr),mean)[,2]
df.art=data.frame(nword=aggregate(df$nword,list(df$Artikeln_Nr),sum))
df.art$JM=aggregate(df$nwords*df$JM,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$SN=aggregate(df$nwords*df$SN,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$DC=aggregate(df$nwords*df$DC,list(df$Artikeln_Nr),sum)[,2]/
df.art$nword
df.art$auto.rvalues=aggregate(df$value,list(df$Artikeln_Nr),mean)[,2]

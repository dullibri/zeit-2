plot(ts(Index_m$perc_dif,start=c(1990,1),freq=12),type='l')
colnames(Index_m)
View(Index_m)
Index=aggregate(register[,c("year","month","day")],list(register$yearissue),mean,na.rm=T)
paste0=function(x){if (nchar(x)==1){y=paste('0',x,sep='')
return(y)}else{return(x)}}
Index$Month=sapply(Index$month,paste0)
Index$Day=sapply(Index$day,paste0)
Index$YearMonthDay=as.Date(paste(Index$year,Index$Month,Index$Day,sep='/'),'%Y/%m/%d')
val_gr=c("perc_dif", "perc_pnword","perc_nword","perc_pword","npword","nnword","nword","pvalue","nvalue","rpvalue","rnvalue","rvalue")
Index=cbind(Index,aggregate(register[,val_gr],list(register$yearissue),mean,na.rm=T)[,-1])
# aggregating over month --------------------------------------------------
Index$yearmonth=paste(Index$year,Index$Month,sep='/')
Index_m=aggregate(Index,list(Index$yearmonth),mean)
Index_m=Index_m[order(Index_m$yearmonth),]
View(Index_m)
Index_m$yearmonth=NULL
Index_m[,c(2)]=NULL
Index_m$Month=NULL
Index_m$Day=NULL
Index_m$day=NULL
View(Index)
View(Index_m)
register$yearmonth=paste(register$year,register$month,sep='.')
Index$var_perc_dif=aggregate(register$perc_dif,list=Index$yearmonth,sd)
Index$var_perc_dif=aggregate(register$perc_dif,list(Index$yearmonth),sd)
Index$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),sd)
View(register)
Index_m$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),sd)
plot(ts(Index_m$var_perc_dif,start=c(1990,1),freq=12),type='l')
Index_m$var_perc_dif
Index_m$var_perc_dif
Index_m$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),sd)
Index_m$var_perc_pword=ggregate(register$perc_pword,list(register$yearmonth),sd)
Index_m$var_perc_nword=ggregate(register$perc_nword,list(register$yearmonth),sd)
Index_m$var_perc_pnword=ggregate(register$perc_pnword,list(register$yearmonth),sd)
Index_m$var_rpvalue=ggregate(register$rpvalue,list(register$yearmonth),sd)
Index_m$var_rnvalue=ggregate(register$rnvalue,list(register$yearmonth),sd)
Index_m$var_rvalue=ggregate(register$rvalue,list(register$yearmonth),sd)
Index_m$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),sd)
Index_m$var_perc_pword=aggregate(register$perc_pword,list(register$yearmonth),sd)
Index_m$var_perc_nword=aggregate(register$perc_nword,list(register$yearmonth),sd)
Index_m$var_perc_pnword=aggregate(register$perc_pnword,list(register$yearmonth),sd)
Index_m$var_rpvalue=aggregate(register$rpvalue,list(register$yearmonth),sd)
Index_m$var_rnvalue=aggregate(register$rnvalue,list(register$yearmonth),sd)
Index_m$var_rvalue=aggregate(register$rvalue,list(register$yearmonth),sd)
plot(ts(Index_m$var_rvalue,start=c(1990,1),freq=12),type='l')
plot(ts(Index_m$var_rnvalue,start=c(1990,1),freq=12),type='l')
Index_m$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),sd,na.rm=T)
Index_m$var_perc_pword=aggregate(register$perc_pword,list(register$yearmonth),sd,na.rm=T)
Index_m$var_perc_nword=aggregate(register$perc_nword,list(register$yearmonth),sd,na.rm=T)
Index_m$var_perc_pnword=aggregate(register$perc_pnword,list(register$yearmonth),sd,na.rm=T)
Index_m$var_rpvalue=aggregate(register$rpvalue,list(register$yearmonth),sd,na.rm=T)
Index_m$var_rnvalue=aggregate(register$rnvalue,list(register$yearmonth),sd,na.rm=T)
Index_m$var_rvalue=aggregate(register$rvalue,list(register$yearmonth),sd,na.rm=T)
plot(ts(Index_m$var_rvalue,start=c(1990,1),freq=12),type='l')
View(Index_m)
aggregate(register$perc_dif,list(register$yearmonth),sd,na.rm=T)[,2]
?aggregate
Index_m$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),simplify=T,sd,na.rm=T)
View(Index_m)
Index_m$var_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),sd,na.rm=T)[,2]
Index_m$var_perc_pword=aggregate(register$perc_pword,list(register$yearmonth),sd,na.rm=T)[,2]
Index_m$var_perc_nword=aggregate(register$perc_nword,list(register$yearmonth),sd,na.rm=T)[,2]
Index_m$var_perc_pnword=aggregate(register$perc_pnword,list(register$yearmonth),sd,na.rm=T)[,2]
Index_m$var_rpvalue=aggregate(register$rpvalue,list(register$yearmonth),sd,na.rm=T)[,2]
Index_m$var_rnvalue=aggregate(register$rnvalue,list(register$yearmonth),sd,na.rm=T)[,2]
Index_m$var_rvalue=aggregate(register$rvalue,list(register$yearmonth),sd,na.rm=T)[,2]
View(Index_m)
plot(ts(Index_m$var_rvalue,start=c(1990,1),freq=12),type='l')
plot(ts(Index_m$var_rpvalue,start=c(1990,1),freq=12),type='l')
plot(ts(Index_m$var_perc_dif,start=c(1990,1),freq=12),type='l')
View(Index_m)
plot(ts(Index_m[,5:23],start=c(1990,1),freq=12))
plot(ts(Index_m[,5:10],start=c(1990,1),freq=12))
Index_m$kur_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_perc_pword=aggregate(register$perc_pword,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_perc_nword=aggregate(register$perc_nword,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_perc_pnword=aggregate(register$perc_pnword,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_rpvalue=aggregate(register$rpvalue,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_rnvalue=aggregate(register$rnvalue,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_rvalue=aggregate(register$rvalue,list(register$yearmonth),kurtosis,na.rm=T)[,2]
?kurtosis
install.packages("fBasics")
library(fBasics)
Index_m$kur_perc_dif=aggregate(register$perc_dif,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_perc_pword=aggregate(register$perc_pword,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_perc_nword=aggregate(register$perc_nword,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_perc_pnword=aggregate(register$perc_pnword,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_rpvalue=aggregate(register$rpvalue,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_rnvalue=aggregate(register$rnvalue,list(register$yearmonth),kurtosis,na.rm=T)[,2]
Index_m$kur_rvalue=aggregate(register$rvalue,list(register$yearmonth),kurtosis,na.rm=T)[,2]
plot(ts(Index_m$kur_perc_dif,start=c(1990,1),freq=12),type='l')
read.csv(paste(DirCode,gsk-d-201411.csv,sep=''))
paste(DirCode,gsk-d-201411.csv,sep='')
read.csv(paste(DirCode,'gsk-d-201411.csv',sep=''))
ifo=read.csv(paste(DirCode,'/gsk-d-201411.csv',sep=''))
View(ifo)
ifo=read.csv(paste(DirCode,'/gsk-d-201411.csv',sep=''))
View(ifo)
plot(ifo[,1])
ifo=read.csv(paste(DirCode,'/gsk-d-201411.csv',sep=''),row.names=1)
plot(ifo[,1])
View(Index_m)
test=zoo(Index_m[,5:30],Index_m$YearMonthDay)
plot(test[,1])
library("zoo", lib.loc="~/R/win-library/3.0")
t3=rollmean(test,k=3,align='right')
plot(t3)
head(t3)
test=yearmon(Index_m$YearMonthDay)
as.yearmon("2007-03-01")
as.yearmon("2007/03/01")
as.yearmon("2007/03/01",'%Y/%m/%d')
Index_m$ym=as.yearmon(Index_m$YearMonthDay,'%Y/%m/%d')
test=zoo(Index_m[,5:30],Index_m$ym)
t3=rollmean(test,k=3,align='right')
head(t3)
head(test)
t3_df=as.data.frame(t3)
View(`t3_df`)
t3_window=window(t3,start=as.Date("1991-01-01"),end=start=as.Date("2014-12-01"))
t3_window=window(t3,start=as.Date("1991-01-01"),end=as.Date("2014-12-01"))
t3_window_df=as.data.frame(t3_window)
which(t3_df=='Jan 1991')
View(`t3_df`)
which(row.names(t3_df)=='Jan 1991')
t3_df_window=t3_df[which(row.names(t3_df)=='Jan 1991'):nrow(t3_df),]
View(`t3_df_window`)
Index_m$ym=as.yearmon(Index_m$YearMonthDay,'%Y/%m/%d')
zeit=zoo(Index_m[,5:30],Index_m$ym)
zeit3=rollmean(zeit,k=3,align='right')
head(zeit3)
zeit3_df=as.data.frame(zeit3)
zeit3_df_window=zeit3_df[which(row.names(zeit3_df)=='Jan 1991'):nrow(zeit3_df),]
# Business cycle turning points -------------------------------------------
# expansion (trough+1 bis peak): "1"
ecri <- read.csv(paste(info$Sfile,"Daten/ECRI business cycles/ecri.csv",sep=''))
# Alternative Indikatoren laden -------------------------------------------------------------
alt_ind <- read.csv(paste(info$Sfile,'Daten/Alternative Indikatoren/alternative_indicators_ma.csv',sep='')
,row.names=1
,header=T)
dat=alt_ind
dat$spread=dat$long.rate-dat$short.rate
rm(alt_ind)
# Einzelne Variablen rausnehmen -------------------------------------------
dat$m0=NULL
dat$m1=NULL
dat$m2=NULL
dat$m3=NULL
dat$gold=NULL
dat$eer=NULL
# dat$u=NULL
dat$constr.order=NULL
dat$prod=NULL
dat$wholesale=NULL
dat$retail.sales=NULL
dat$bus.exp=NULL
# Hinzufuegen der Mediatenor daten -----------------------------------------
mt <- read.csv(paste(info$Sfile,'Daten/MediaTenor/MediaTenor_indicators_2001m01_2014m04.csv',sep=''))
# herausnehmen der indikatoren --------------------------------------------
vSel_c = which(colSums(is.na(mt))<2)
mt_small = mt[,vSel_c]
rm(vSel_c)
mt_small=mt_small[,4:ncol(mt_small)]
# UnitR_test=matrix(NA,ncol(mt_small),1)
# for (i in 1:ncol(mt_small)){
#   UnitR_test[i,1]=CADFtest(mt_small[,i], max.lag.y = 12,criterio='BIC',type='trend')$p.value
#
# }
# CADFtest(mt_small[,1], max.lag.y = 12,criterio='BIC',type='trend')$p.value
# test=apply(mt_small,2,CADFtest,max.lag.y=12,criterion='BIC',type='trend')$p.value
aux=rbind(matrix(NA,12,ncol(mt_small)),as.matrix(mt_small))
dat=cbind(aux,dat)
dat$MTI_Past=NULL # nas
rm(aux)
# idosyncratische komponente und 1. HK ------------------------------------
# MFread_data bis mt_small laufen alssen
row.names(mt_small)=mt[,3] # Zeit als Zeilenbeschreibung
rm(mt)
mt_small=mt_small[1:(nrow(mt_small)-1),]# fÃ¼r April 2014 sind keine Daten vorhanden
# dif_mt_small=mt_small[2:nrow(mt_small),]-mt_small[1:(nrow(mt_small)-1),] # Erste Differenzen
PcMti=prcomp(mt_small
# PcMti=prcomp(dif_mt_small # falls in Differenzen
,center = TRUE # mean=0
#               ,scaled=T # sd=1
)
mt_loadings=as.matrix(PcMti$rotation)
# test1=predict(PcMti)%*%matrix(mt_loadings[1,],ncol=1) #so bekommt man die orginalreihe aus den pc und den loadings
# test2=predict(PcMti)[,2:ncol(mt_loadings)]%*%matrix(mt_loadings[1,2:ncol(mt_loadings)],ncol=1) # originalreihe nur mit den letzten hk
mt_pc_level=as.matrix(mt_small)%*%mt_loadings # pcs der level daten mit den loadings der differenzen
mt_idio=matrix(NA,nrow(mt_small),ncol(mt_small))
for (i in 1:ncol(mt_small)){
mt_idio[,i]=lm(mt_small[,i]~mt_pc_level[,1])$res
}
rm(i)
# mt_idio_alternativ=mt_pc_level[,2:ncol(mt_pc_level)]%*%t(mt_loadings[,2:ncol(mt_loadings)]) # ohne die erste hk wieder zusammensetzen
colnames(mt_idio)=paste('idio',colnames(mt_small))
mt_idio=cbind(mt_idio,mti_pc1=mt_pc_level[,1])
aux=rbind(matrix(NA,12,ncol(mt_idio)),as.matrix(mt_idio))
aux=rbind(aux,matrix(NA,nrow=1,ncol=ncol(aux)))
row.names(aux)=NULL
dat=cbind(aux,dat)
rm(aux,mt_idio,mt_loadings,mt_pc_level,mt_small,PcMti)
# HinzufÃÂ¼gen der ifo r-indikatoren -----------------------------------------
ifo <- read.csv(paste(info$Sfile,'Daten/Alternative Indikatoren/ifo/r16.csv',sep=''), header=T)
ifo=ifo[,-c(1)]
dat=cbind(ifo,dat)
rm(ifo)
zeit3_df_window=zeit3_df[which(row.names(zeit3_df)=='Jan 2001'):nrow(zeit3_df),]
write.csv(zeit3_df_window,'zeit.csv')
zeit=cbind(zeit,zeit3)
zeit=zoo(Index_m[,5:30],Index_m$ym)
zeit3=rollmean(zeit,k=3,align='right')
zeit=cbind(zeit,zeit3)
zeit_df=as.data.frame(zeit)
zeit_df_window=zeit_df[which(row.names(zeit_df)=='Jan 2001'):nrow(zeit_df),]
write.csv(zeit_df_window,'zeit.csv')
View(zeit_df)
View(zeit_df_window)
write.csv(zeit_df_window,'zeit.csv')
View(zeit_df)
source('H:/git/zeit-2/Getting_economics_register.R', echo=TRUE)
year
issue
Nissue
(!'register'%in%ls())
register_aux=registry(year,issue)
register_aux
year
issue
issue_formated=as.character(issue)
if (issue<10){
issue_formated=paste(0,issue,sep='')
}
input <-paste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
if (url.exists(input)==F){return(NULL)}
(url.exists(input)==F)
aste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
paste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
for (year in 1993:2014){
# year=2014
input<-paste('http://www.zeit.de/',year,'/index/seite-3',sep='')
plainhtml=readLines(input,encoding='UTF-8')
unlink(input)
Nissue=fnissue(year,plainhtml)
for (issue in 1:Nissue){
if (!'register'%in%ls()){
register=registry(year,issue)
}
if (year==1993&issue=1){next}
register_aux=registry(year,issue)
if (register_aux==-999){next}else{
register=rbind(register
,register_aux)
}
}
}
if (year==1993&issue==1){next}
for (year in 1993:2014){
# year=2014
input<-paste('http://www.zeit.de/',year,'/index/seite-3',sep='')
plainhtml=readLines(input,encoding='UTF-8')
unlink(input)
Nissue=fnissue(year,plainhtml)
for (issue in 1:Nissue){
if (!'register'%in%ls()){
register=registry(year,issue)
}
if (year==1993&issue==1){next}
register_aux=registry(year,issue)
if (register_aux==-999){next}else{
register=rbind(register
,register_aux)
}
}
}
year=1993
issue=1
# for each article it returns the weblink, its title,year, and issue
issue_formated=as.character(issue)
if (issue<10){
issue_formated=paste(0,issue,sep='')
}
issue_formated
input <-paste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
if (url.exists(input)==F){return(NULL)}
(url.exists(input)==F)
plainhtml_all=readLines(input,encoding='UTF-8')
unlink(input)
# Getting ressorts and indeces, cutting off first part --------------------
ressort_index=grep('<li class="archiveressort">',plainhtml_all)
plainhtml=plainhtml_all[-c(1:(ressort_index[1]-1))]
ressort_start=ressort_index-(ressort_index[1]-1)
ressort_end=c(ressort_start[-1],length(plainhtml))-1
ressorts=plainhtml[ressort_start]
ressorts=gsub('<li class=\"archiveressort\">|</li>','',ressorts)
dfressorts=data.frame(ressorts,ressort_start,ressort_end,length=ressort_end-ressort_start+1)
mainressorts=paste('[Ww]irtschaft',sep='|')#,'[Pp]olitik','[Dd]ossier'
ind=fmainind(dfressorts,mainressorts)
if (ind==0){return(-999)}
plainhtml=plainhtml[ind]
(ind==0)
ind
length(ind)
source('~/.active-rstudio-document', echo=TRUE)
year
issue
issue_formated=as.character(issue)
if (issue<10){
issue_formated=paste(0,issue,sep='')
}
input <-paste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
if (url.exists(input)==F){return(NULL)}
plainhtml_all=readLines(input,encoding='UTF-8')
unlink(input)
# Getting ressorts and indeces, cutting off first part --------------------
ressort_index=grep('<li class="archiveressort">',plainhtml_all)
plainhtml=plainhtml_all[-c(1:(ressort_index[1]-1))]
ressort_start=ressort_index-(ressort_index[1]-1)
ressort_end=c(ressort_start[-1],length(plainhtml))-1
ressorts=plainhtml[ressort_start]
ressorts=gsub('<li class=\"archiveressort\">|</li>','',ressorts)
dfressorts=data.frame(ressorts,ressort_start,ressort_end,length=ressort_end-ressort_start+1)
mainressorts=c('[Ww]irtschaft')
ind=fmainind(dfressorts,mainressorts)
year
issue
ind=fmainind(dfressorts,mainressorts)
mdfressorts<-dfressorts[grep(mainressorts,dfressorts$ressorts),]
mdfressorts
(length(mdfressorts)==0)
mdfressorts
class(mdfressorts)
(nrow(mdfressorts)==0)
fmainind <- function(dfressorts,mainressorts){
mdfressorts<-dfressorts[grep(mainressorts,dfressorts$ressorts),]
if (nrow(mdfressorts)==0){return(-999)}
Nmressorts<-nrow(mdfressorts)
ind=matrix(NA,nrow=sum(mdfressorts[,'length']),ncol=1)
j=1
for (i in 1:Nmressorts){
ind[j:(j-1+mdfressorts[i,4])]=mdfressorts[i,2]:mdfressorts[i,3]
j=(j-1+mdfressorts[i,4])+1
}
return(ind)
}
registry<-function(year,issue){
# makes a register of an issue of the respective year.
# for each article it returns the weblink, its title,year, and issue
issue_formated=as.character(issue)
if (issue<10){
issue_formated=paste(0,issue,sep='')
}
input <-paste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
if (url.exists(input)==F){return(NULL)}
plainhtml_all=readLines(input,encoding='UTF-8')
unlink(input)
# Getting ressorts and indeces, cutting off first part --------------------
ressort_index=grep('<li class="archiveressort">',plainhtml_all)
plainhtml=plainhtml_all[-c(1:(ressort_index[1]-1))]
ressort_start=ressort_index-(ressort_index[1]-1)
ressort_end=c(ressort_start[-1],length(plainhtml))-1
ressorts=plainhtml[ressort_start]
ressorts=gsub('<li class=\"archiveressort\">|</li>','',ressorts)
dfressorts=data.frame(ressorts,ressort_start,ressort_end,length=ressort_end-ressort_start+1)
mainressorts=c('[Ww]irtschaft')
ind=fmainind(dfressorts,mainressorts)
if (ind=-999){return(-999)}
plainhtml=plainhtml[ind]
links_index=regexpr(paste('http://www.zeit.de/','(.*)','/','(.*)" tit',sep=''),plainhtml)
links_raw=regmatches(plainhtml,links_index)
links=gsub('" tit','',links_raw)
#         links_last=sapply(strsplit(links,'/'),function(x)x[6])
#         links_int=as.integer(links_last)
#         links=links[is.na(links_int)==T]
#         links=links[-grep('.xml',links)]
if (length(links)==0){return(NULL)}
plainhtml_redux=plainhtml[links_index!=-1]
titles=matrix(NA,nrow=length(links),ncol=1)
titles_index=regexpr('<h4 class="title\"(.*)</h4',plainhtml)
titles_raw=regmatches(plainhtml,titles_index)
titles_exist=gsub('<h4 class=\"title\">|</h4','',titles_raw)
titles=titles_exist
if (length(links)!=length(titles)){
register=data.frame(link=links
,title=NA
,year=year
,issue=issue)
}else{
register=data.frame(link=links
,title=titles
,year=year
,issue=issue)
}
return(register)
}
registry<-function(year,issue){
# makes a register of an issue of the respective year.
# for each article it returns the weblink, its title,year, and issue
issue_formated=as.character(issue)
if (issue<10){
issue_formated=paste(0,issue,sep='')
}
input <-paste('http://www.zeit.de/',year,'/',issue_formated,'/index',sep='')
if (url.exists(input)==F){return(NULL)}
plainhtml_all=readLines(input,encoding='UTF-8')
unlink(input)
# Getting ressorts and indeces, cutting off first part --------------------
ressort_index=grep('<li class="archiveressort">',plainhtml_all)
plainhtml=plainhtml_all[-c(1:(ressort_index[1]-1))]
ressort_start=ressort_index-(ressort_index[1]-1)
ressort_end=c(ressort_start[-1],length(plainhtml))-1
ressorts=plainhtml[ressort_start]
ressorts=gsub('<li class=\"archiveressort\">|</li>','',ressorts)
dfressorts=data.frame(ressorts,ressort_start,ressort_end,length=ressort_end-ressort_start+1)
mainressorts=c('[Ww]irtschaft')
ind=fmainind(dfressorts,mainressorts)
if (ind==-999){return(-999)}
plainhtml=plainhtml[ind]
links_index=regexpr(paste('http://www.zeit.de/','(.*)','/','(.*)" tit',sep=''),plainhtml)
links_raw=regmatches(plainhtml,links_index)
links=gsub('" tit','',links_raw)
#         links_last=sapply(strsplit(links,'/'),function(x)x[6])
#         links_int=as.integer(links_last)
#         links=links[is.na(links_int)==T]
#         links=links[-grep('.xml',links)]
if (length(links)==0){return(NULL)}
plainhtml_redux=plainhtml[links_index!=-1]
titles=matrix(NA,nrow=length(links),ncol=1)
titles_index=regexpr('<h4 class="title\"(.*)</h4',plainhtml)
titles_raw=regmatches(plainhtml,titles_index)
titles_exist=gsub('<h4 class=\"title\">|</h4','',titles_raw)
titles=titles_exist
if (length(links)!=length(titles)){
register=data.frame(link=links
,title=NA
,year=year
,issue=issue)
}else{
register=data.frame(link=links
,title=titles
,year=year
,issue=issue)
}
return(register)
}
issue
for (issue in 36:Nissue){
if (!'register'%in%ls()){
register=registry(year,issue)
}
registry_res=registry(year,issue)
if (length(registry_res==1)){next}
register=rbind(register
,registry_res)
}
source('~/.active-rstudio-document', echo=TRUE)
View(register)
year
issue
View(registry_res)
for (year in 1990:2014){
# year=2003
input<-paste('http://www.zeit.de/',year,'/index/seite-3',sep='')
plainhtml=readLines(input,encoding='UTF-8')
unlink(input)
Nissue=fnissue(year,plainhtml)
for (issue in 1:Nissue){
if (!'register'%in%ls()){
register=registry(year,issue)
}
registry_res=registry(year,issue)
if (length(registry_res==1)){next}
register=rbind(register
,registry_res)
}
}
register
year
issue
View(registry_res)
(length(registry_res==1))
length(registry_res==1)
registry_res
for (year in 1990:2014){
# year=2003
input<-paste('http://www.zeit.de/',year,'/index/seite-3',sep='')
plainhtml=readLines(input,encoding='UTF-8')
unlink(input)
Nissue=fnissue(year,plainhtml)
for (issue in 1:Nissue){
if (!'register'%in%ls()){
register=registry(year,issue)
}
registry_res=registry(year,issue)
if (length(registry_res)==1){next}
register=rbind(register
,registry_res)
}
}
View(register)
source('~/.active-rstudio-document', echo=TRUE)
View(register)
test=register$year[register$issue==52]
test=unique(test)
test
?save
save(list='register','e_register.RData')
save(list='register',file='e_register.RData')
e_register=register
save(list='e_register',file='e_register.RData')
